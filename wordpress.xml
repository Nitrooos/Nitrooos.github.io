<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.2.2" created="2019-07-14 15:32" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Nitrooos</title>
	<link>https://nitrooos.pl</link>
	<description>wiarygodny deweloper</description>
	<pubDate>Sun, 14 Jul 2019 15:32:59 +0000</pubDate>
	<language>pl-PL</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://nitrooos.pl</wp:base_site_url>
	<wp:base_blog_url>https://nitrooos.pl</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[bartoszkostaniak_k9gtfpdt]]></wp:author_login><wp:author_email><![CDATA[bartoszkostaniak@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[nitrooos]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>31</wp:term_id>
		<wp:category_nicename><![CDATA[backend]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Backend]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[bezpieczenstwo]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Bezpieczeństwo]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>24</wp:term_id>
		<wp:category_nicename><![CDATA[devops]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[DevOps]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[english]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[English]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[frontend]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Frontend]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[na-dluzej]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Na dłużej]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>13</wp:term_id>
		<wp:category_nicename><![CDATA[polski]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Polski]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>37</wp:term_id>
		<wp:category_nicename><![CDATA[python]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Python]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>16</wp:term_id>
		<wp:category_nicename><![CDATA[szybkie-notki]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Szybkie notki]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>33</wp:term_id>
		<wp:tag_slug><![CDATA[geoip]]></wp:tag_slug>
		<wp:tag_name><![CDATA[#geoip]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>32</wp:term_id>
		<wp:tag_slug><![CDATA[python]]></wp:tag_slug>
		<wp:tag_name><![CDATA[#python]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[angular]]></wp:tag_slug>
		<wp:tag_name><![CDATA[angular]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[basic-auth]]></wp:tag_slug>
		<wp:tag_name><![CDATA[basic auth]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>2</wp:term_id>
		<wp:tag_slug><![CDATA[bezpieczenstwo]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bezpieczeństwo]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[bitmapy]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bitmapy]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>23</wp:term_id>
		<wp:tag_slug><![CDATA[code]]></wp:tag_slug>
		<wp:tag_name><![CDATA[code]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[cookie]]></wp:tag_slug>
		<wp:tag_name><![CDATA[cookie]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[deploy]]></wp:tag_slug>
		<wp:tag_name><![CDATA[deploy]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[dokumentacja]]></wp:tag_slug>
		<wp:tag_name><![CDATA[dokumentacja]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>35</wp:term_id>
		<wp:tag_slug><![CDATA[geoip-2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[geoip]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>36</wp:term_id>
		<wp:tag_slug><![CDATA[geolokalizacja]]></wp:tag_slug>
		<wp:tag_name><![CDATA[geolokalizacja]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>25</wp:term_id>
		<wp:tag_slug><![CDATA[git]]></wp:tag_slug>
		<wp:tag_name><![CDATA[git]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>4</wp:term_id>
		<wp:tag_slug><![CDATA[haslo]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hasło]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>22</wp:term_id>
		<wp:tag_slug><![CDATA[hyphenate]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hyphenate]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[ikony]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ikony]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[javascript]]></wp:tag_slug>
		<wp:tag_name><![CDATA[JavaScript]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[jsdoc]]></wp:tag_slug>
		<wp:tag_name><![CDATA[jsdoc]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[kod]]></wp:tag_slug>
		<wp:tag_name><![CDATA[kod]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[nginx]]></wp:tag_slug>
		<wp:tag_name><![CDATA[nginx]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[pipe]]></wp:tag_slug>
		<wp:tag_name><![CDATA[pipe]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>34</wp:term_id>
		<wp:tag_slug><![CDATA[python-2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[python]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>30</wp:term_id>
		<wp:tag_slug><![CDATA[svg]]></wp:tag_slug>
		<wp:tag_name><![CDATA[svg]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>3</wp:term_id>
		<wp:tag_slug><![CDATA[token]]></wp:tag_slug>
		<wp:tag_name><![CDATA[token]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[workflow]]></wp:tag_slug>
		<wp:tag_name><![CDATA[workflow]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[geoip]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[#geoip]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[#python]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[angular]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[angular]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[backend]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Backend]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[basic-auth]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[basic auth]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bezpieczenstwo]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Bezpieczeństwo]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bezpieczenstwo]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bezpieczeństwo]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bitmapy]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bitmapy]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[code]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[code]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cookie]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[cookie]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[deploy]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[deploy]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[devops]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DevOps]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dokumentacja]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[dokumentacja]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[english]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[English]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[frontend]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Frontend]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[35]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[geoip-2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[geoip]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[36]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[geolokalizacja]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[geolokalizacja]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[git]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[git]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[haslo]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hasło]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hyphenate]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hyphenate]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ikony]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ikony]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[javascript]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[JavaScript]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jsdoc]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[jsdoc]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[kod]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[kod]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[kontakt]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Kontakt]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[na-dluzej]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Na dłużej]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[nginx]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[nginx]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pipe]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[pipe]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[polski]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Polski]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python-2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[python]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[37]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Python]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[svg]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[svg]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[szybkie-notki]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Szybkie notki]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[token]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[token]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[workflow]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[workflow]]></wp:term_name>
	</wp:term>
			<wp:term><wp:term_id>12</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[kontakt]]></wp:term_slug><wp:term_name><![CDATA[Kontakt]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.2.2</generator>

<image>
	<url>https://nitrooos.pl/wp-content/uploads/2019/03/favicon.png</url>
	<title>Nitrooos</title>
	<link>https://nitrooos.pl</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title>Polityka prywatności</title>
		<link>https://nitrooos.pl/polityka-prywatnosci/</link>
		<pubDate>Sun, 10 Mar 2019 19:30:51 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Kim jesteśmy?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Administratorem witryny internetowej nitrooos.pl i przechowywanych przez nią danych jest Nitrosoft Bartosz Kostaniak, działalność gospodarcza wpisana do CEiDG pod numerem NIP: 7773290104, REGON: 367835571. Ochrona danych odbywa się zgodnie z wymogami powszechnie obowiązujących przepisów prawa, a ich przechowywanie ma miejsce na zabezpieczonych serwerach.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Jakie dane osobowe przechowujemy i dlaczego?</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Komentarze</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jeśli użytkownik witryny nitrooos.pl napisze komentarz pod dowolnym wpisem, to przechowywane są dane wpisane przez niego w formularzu tworzenia komentarza, a także adres IP użytkownika oraz identyfikator przeglądarki (ang. User Agent) aby wspomóc mechanizm wykrywania spamu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anonimizujący łańcuch znaków stworzony na podstawie adresu email użytkownika (ang. hash) może być udostępniony zewnętrznemu serwisowi Gravatar w celu sprawdzenia czy użytkownik z niego korzysta. Polityka prywatności serwisu Gravatar jest dostępna tutaj: https://automattic.com/privacy/. Po uzyskaniu akceptacji komentarza użytkownika, i w przypadku korzystania z serwisu Gravatar, ustawiony w tym serwisie obrazek profilowy będzie wyświetlony publicznie w kontekście dodanego komentarza.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Pliki cookies</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jeśli użytkownik witryny nitrooos.pl pozostawi komentarz na stronie, zgadza się na zapisanie w pliku cookies, przechowywanym przez jego przeglądarkę internetową na urządzeniu, z którego korzysta, jego imienia, adresu email i (opcjonalnie) nazwy strony internetowej, w której imieniu zamieszcza komentarz. Dane te są zapamiętywane w pliku cookies dla wygody użytkownika po to, aby nie musiał wypełniać tych samych danych ponownie, pisząc kolejny komentarz w przyszłości. Te pliki cookies będą przechowywane w pamięci urządzenia użytkownika przez 1 rok.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Treści pochodzące z innych witryn</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Wpisy opublikowane w witrynie nitrooos.pl mogą zawierać treści osadzone, pochodzące z innych witryn (np. wideo, obrazy, inne artykuły itp.). Treści pochodzące z innych witryn zachowują się dokładnie w taki sam sposób, jakby użytkownik rzeczywiście przeglądał witrynę, z której pochodzą.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Takie zewnętrzne witryny mogą zbierać dane o użytkowniku, używać plików cookies, wykorzystywać dodatkowe mechanizmy śledzące i monitorować interakcje użytkownika z treścią, która została osadzona.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Jak długo przechowywane są dane użytkowników?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jeśi użytkownik pozostawi komentarz na witrynie nitrooos.pl, komentarz i jego metadane będą przechowywane bezterminowo. Jest tak dlatego, abyśmy byli w stanie rozpoznać i zatwierdzać każde kolejne komentarze tego użytkownika w sposób automatyczny, zamiast kierować je do kolejki komentarzy czekających na moderację.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Prawa uzytkowników odnośnie ich danych przechowywanych przez witrynę</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jeśli użytkownik pozostawił komentarz na stronie, może zażądać otrzymania pliku zawierającego wszystkie dane personalne, które przechowujemy o tym użytkowniku, włączając w to dane, które użytkownik przesłał do witryny nitrooos.pl. Użytkownik taki może także zażądać usunięcia każdej z tych danych. Zdanie to nie dotyczy danych, które jesteśmy zobligowani do przechowywania dla celów administracyjnych, prawnych, bądź względów bezpieczeństwa.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Dokąd wysyłamy dane użytkowników?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Komentarze użytkowników witryny nitrooos.pl mogą być sprawdzane przez automatyczne systemy detekcji spamu.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2019-03-10 20:30:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-10 19:30:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[polityka-prywatnosci]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Hasła użytkowników i ich bezpieczne resetowanie</title>
		<link>https://nitrooos.pl/2019/03/resetowanie-hasla-uzytkownika/</link>
		<pubDate>Wed, 13 Mar 2019 20:57:11 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Dzisiaj na tapetę bierzemy temat resetowania hasła użytkowników, głównie ze względu na popularność takiego rozwiązania, które obecne jest dzisiaj niemal na każdej witrynie. Fakt ten może sugerować, że jego implementacja nie jest sprawą szczególnie problematyczną, także z perspektywy bezpieczeństwa. Nie mam w zwyczaju jednak opierać się na sugestiach, dlatego zacznę od postawienia pytania:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Czy możliwe jest zapewnienie bezpieczeństwa takiemu mechanizowi?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Odpowiedź, w moim przekonaniu, brzmi: NIE. A przynajmniej dopóki mamy na myśli tradycyjny mechanizm z wykorzystaniem poczty e-mail i adresu przypisanego do użytkownika. I nie chodzi tu o to, że pełnej gwarancji bezpieczeństwa nie uzyskamy nigdy. Po prostu <strong>SMTP jako protokół wymiany wiadomości pomiędzy serwerami pocztowymi jest z założenia nieszyfrowany.</strong> Stwarza to niemożliwe do wykluczenia (niewielkie, ale jednak) niebezpieczeństwo przejęcia korespondencji pomiędzy serwerem aplikacji a użytkownikiem przez osobę trzecią, dlatego wszystkie poniższe rady będą miały na celu ograniczenie tego ryzyka.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Zasada nr 1: Mechanizm resetu hasła oparty o token</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Wysyłając użytkownikowi jedynie <strong>token</strong> umożliwiający zmianę hasła, a nie np. hasło tymczasowe, nie zmieniamy jego stanu w naszym systemie. Użytkownika ciągle obowiązuje stare hasło, wiemy jedynie, że została podjęta próba jego zmiany. W przypadku <strong>hasła tymczasowego</strong> użytkownik posiada już zmienione hasło, co tworzy poważną lukę w bezpieczeństwie. Polega ona na tym, że każdy może zmienić hasło każdego innego użytkownika, jeśli tylko pozna jego adres e-mail. Co prawda nie będzie znał tego nowego hasła, ale nie chcemy przecież umożliwiać dokonywania takich cudów w naszej aplikacji. Opcja trzecia, czyli wysyłanie <strong>bieżącego hasła</strong> użytkownika mailem też odpada, ponieważ jako poważni deweloperzy nie przechowujecie go w plaintextcie (prawda?!). Najsensowniejszym rozwiązaniem wydaje się więc mechanizm resetu oparty o token, wysyłany w formie linka na adres e-mail użytkownika.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Właściwości wysyłanego tokenu</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Oczywiście decydując się na wykorzystanie tokenu musimy zadbać, aby posiadał on konkretne właściwości, a mianowicie musi być:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>jednorazowy</li><li>nieprzewidywalny (kryptograficznie bezpieczny)</li><li>odpowiednio długi</li><li>przypisany jednoznacznie do jednego konta</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Zapewnienie powyższych właściwości wymaga jednak trochę wysiłku, stąd pytanie dlaczego każda z nich jest konieczna? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Jednorazowość</strong> jest niezbędna, aby nie pozostawiać takiej "furtki”, jaką jest umożliwienie zmiany hasła użytkownikowi, otwartej zbyt długo (będzie o tym jeszcze mowa w dalszej części).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Nieprzewidywalność</strong> oznacza użycie prawdziwie losowych generatorów liczb do stworzenia tokena w celu uniemożliwienia jego samodzielnego skonstruowania/odgadnięcia przez osobę niepowołaną. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Długość</strong> zapewnia ochronę przed prostym atakiem typu <em>brute force</em>. Dzięki niej nie jest prawdopodobne wygenerowanie w sensownym czasie prawidłowego tokenu próbując wszystkich możliwych kombinacji. W praktyce stosuje się tokeny minimum 32-znakowe.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Powiązanie z konkretnym kontem</strong> zapewnia, że token wygenerowany przez użytkownika A może zostać użyty do zmiany hasła tylko tego użytkownika, a nie np. nieświadomego niczego użytkownika B.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Jeszcze jedna ważna notka o zawartości tokenu</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>Nie przechowuj</strong> w wygenerowanym tokenie informacji o koncie użytkownika ani o czasie jego ważności. Wbudowanie takich informacji w sam token sprawi, że możliwe stanie się  (potencjalne) resetowanie haseł innym osobom niż ta, która token wygenerowała. Modyfikacje mogłyby także np. sztucznie wydłużyć jego ważność. Token z założenia ma służyć jedynie identyfikacji odpowiedniego wpisu w bazie danych, tj. przypisanego do niego użytkownika.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Zasada nr 2: Jak najszybsze unieważnianie tokenu</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Oczywistym jest, że jeśli już umożliwiamy zmianę hasła w aplikacji, to cała procedura powinna przebiegać sprawnie i szybko, bez pozostawiania otwartych “furtek” do systemu. Generalna zasada brzmi: <strong>pozostaw token ważnym tylko tak długo, jak to konieczne, ale nie dłużej niż przez x jednostek czasu</strong>. W praktyce oznacza to, że:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Generując token na żądanie użytkownika o zmianę hasła, musimy nadać&nbsp;mu krótki okres ważności, wynoszący standardowo do kilkunastu minut (np. 15 minut).</li><li>Należy unieważnić token natychmiast, jeśli:<ul><li>Procedura zmiany hasła <strong>zakończy się powodzeniem</strong> (ponieważ nie jest on już dłużej potrzebny).</li><li>Użytkownik <strong>zaloguje się za pomocą dotychczasowego hasła</strong> (oznacza to, że jego zmiana nie jest już potrzebna, użytkownik przypomniał sobie dotychczasowe hasło).</li><li><strong>Stworzone zostanie nowe żądanie zmiany hasła</strong> (ponieważ w każdej chwili maksymalnie jeden token może być aktywny dla pojedynczego konta).</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>W praktyce spotyka się także dodatkowe zabezpieczenie polegające na blokowaniu tokenu po jego pierwszym użyciu. Oznacza to, że korzystając z danego tokenu można przejść do strony umożliwiającej zmianę hasła tylko 1 raz, następne próby zakończą się niepowodzeniem, choć&nbsp;sam token pozostaje ciągle ważny.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Zasada nr 3: Użycie nowej soli dla nowego hasła</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Po uwierzytelnieniu użytkownika za pomocą odpowiedniego tokenu przychodzi czas na rzeczywistą zmianę jego hasła w bazie danych. Pamiętać należy wtedy o użyciu nowej soli do haszowania zmienionego hasła. Pojawia się pytanie dlaczego jest to ważne? Otóż jeśli używana sól jest wspólna dla wszystkich haseł w bazie, to w przypadku 2 użytkowników o tym samym haśle będą oni posiadać ten sam hash hasła w bazie danych. Niestety, zaistnienie takiej sytuacji nie jest niemożliwe do wykluczenia. A co oznaczać będzie wystąpienie takiej sytuacji dla atakującego w przypadku wycieku danych? Będzie mocną przesłanką, że haszując hasła korzystano z tej samej soli.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Zasada nr 4: Unieważnienie istniejących sesji</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pomyślne zakończenie procedury zmiany hasła to jeszcze nie koniec, ponieważ wciąż mogą istnieć sesje użytkownika zalogowanego za pomocą starego hasła. Jakie to ma znaczenie? Użytkownik mógł chcieć zmienić swoje hasło właśnie dlatego, że stare zostało skompromitowane, to znaczy poznała je osoba trzecia. Właśnie dlatego <strong>wszystkie sesje użytkownika</strong> zmieniającego hasło <strong>muszą zostać unieważnione</strong>. Użytkownik z kolei po pomyślnym zakończeniu procedury przekierowany na stronę logowania. Zachowanie takie ma na celu zapewnienie, że tylko osoba zmieniająca hasło konta ma możliwość&nbsp;zalogowania się do aplikacji, tylko za pomocą nowego hasła.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Podsumowanie</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Poprzez powyższe zasady starałem się pokazać kilka sposobów na uczynienie mechanizmu resetowania hasła wolnym od najpoważniejszych luk bezpieczeństwa. Oczywiście można wprowadzać kolejne usprawnienia, niemniej jednak powyższe rady są podstawowymi, od których należy zacząć.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Źródła:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://crackstation.net/hashing-security.htm">https://crackstation.net/hashing-security.htm</a></li><li><a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Renew_the_Session_ID_After_Any_Privilege_Level_Change">https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Renew_the_Session_ID_After_Any_Privilege_Level_Change</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Choć dzisiejszy temat może wydawać się prosty (to przecież standardowa funkcjonalność, co nie?), to, jak postaram się udowodnić, jest tak tylko dopóki mamy w poważaniu kwestie bezpieczeństwa - najprościej przecież wysłać nowe hasło mailem i już. Czy aby na pewno? Zapraszam do lektury!]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 20:57:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 20:57:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[resetowanie-hasla-uzytkownika]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="bezpieczenstwo"><![CDATA[Bezpieczeństwo]]></category>
		<category domain="post_tag" nicename="bezpieczenstwo"><![CDATA[bezpieczeństwo]]></category>
		<category domain="post_tag" nicename="haslo"><![CDATA[hasło]]></category>
		<category domain="category" nicename="na-dluzej"><![CDATA[Na dłużej]]></category>
		<category domain="category" nicename="polski"><![CDATA[Polski]]></category>
		<category domain="post_tag" nicename="token"><![CDATA[token]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Hasła]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Reguły zwiększające bezpieczeństwo mechanizmu resetowania hasła użytkownika w Twojej aplikacji, opisane w przystępny sposób wraz z wyjaśnieniami. Zapraszam!]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>JSDoc, czyli zacznij dokumentować swój kod!</title>
		<link>https://nitrooos.pl/2019/03/jsdoc/</link>
		<pubDate>Wed, 27 Mar 2019 19:03:46 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Jak często zdarzało się Wam tracić czas na zrozumienie kodu napisanego tak niejasno, że jego jakość ociera się o sabotaż? Czy nie byłoby wspaniale mieć chociaż opis jego interfejsu, wiedzieć co pożera na wejściu oraz co oznaczają dane produkowane przez niego na wyjściu? To właśnie dla ułatwienia życia programistom w takich (i innych!) przypadkach powstały różne sposoby umieszczania w kodzie (najczęściej w formie komentarze) specjalnych adnotacji, służących opisowi działania danego kawałka kodu (funkcji, modułu, klasy itd). Jednym z takich narzędzi jest dostępny dla JavaScript program jsdoc. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Czym jest jsdoc?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>jsdoc to program, który możemy zainstalować używając managera paczek npm za pomocą prostej komendy:<br></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">npm install jsdoc --save-dev<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Potrafi wykrywać on specjalne adnotacje w kodzie JavaScript, umieszczone jako część komentarza (pomiędzy znakami /** tutaj zawartość do zinterpretowania przez jsdoc */). Adnotacje te opisują np. znaczenie i typy poszczególnych parametrów wywołania funkcji, jej wartość i typ, opisują zastosowanie i zakres odpowiedzialności klasy itp. Wachlarz możliwości jest naprawdę szeroki (co, choć częściowo, postaram się pokazać w tym wpisie). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Adnotacje w tym kształcie już okazują się przydatne dla programistów, którzy będą pracowali nad naszym kodem w przyszłości, ponieważ lepiej i szybciej zrozumieją intencje autora, to jednak nie wszystko! Narzędzia tego możemy użyć do <strong>generowania dokumentacji kodu</strong> na podstawie samych adnotacji i treści w nich zawartych. Możemy robić to w sposób zautomatyzowany, w formacie gotowych do przeglądania stron HTML. Jakie to ma zastosowanie? Wyobraźmy sobie, że pracujemy nad projektem, z którego potencjalnie (od strony programistycznej) korzystać może wiele osób/organizacji. Interesować je będzie możliwość wykorzystania naszego kodu, jednak bez wgłębiania się w szczegóły implementacji. W takiej sytuacji udostępnienie im dokumentacji jest zbawienne, a dzięki jsdoc możemy wygenerować ją w każdej chwili.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Przejdźmy do konkretów!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zaczniemy od stworzenia kodu składającego się z deklaracji klasy wraz z jej metodami oraz prostego modułu i typu. Poniższy kod jest wyłącznie przykładowy, nie należy wyciągać na jego podstawie wniosków dotyczących spojrzenia autora na świat ;) Zadeklarowana zostanie prosta klasa “Manager” z kilkoma metodami, umożliwiającymi obiektom tej klasy sprawne zarządzanie projektami w organizacji:<br></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>class Manager {
  _projects = [];
  _name;

  constructor(name, projects) { … }
  reduceDeadline(project, fireMalcontents = false) { … }
  cutBudgetOnClientRequest(project, reducedBudget) { … }
  delayedProjects() { … }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Oczywiście w przypadku tak prostej klasy możemy domyśleć się jak (mniej więcej) powinny zachowywać się zadeklarowane metody. Nie wiemy jednak dokładnie w jaki sposób zmieniają one stan obiektu oraz czy zwracają jakąś wartość. Dodatkowo same nazwy mogą okazać się mylące lub nieścisłe (słowo “Manager” oznaczać może przecież zarządców zupełnie w zupełnie różnych kontekstach). Dodatkowo, w prawdziwych projektach, kod potrafi być znacznie bardziej złożony. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Drugim kawałkiem do udokumentowania będzie prosty moduł, eksportujący jedną funkcję, służącą do usuwania duplikatów z tablicy obiektów:<br></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>const unique = (list) => 
  list.filter((element, index) => list.indexOf(element) === index);

export {
  unique
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Tutaj sprawa jest jeszcze prostsza, ale nawet mając podaną nazwę funkcji trzeba się na chwilę wczytać w jej implementację, aby zrozumieć jej sposób działania, typ parametru i wartość.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Dodajmy pierwsze adnotacje jsdoc!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zaczniemy od klasy Manager, poprzez dodanie nad jej definicją jednolinijkowej adnotacji:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/** Class representing a standard manager in your company */</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Dzięki niej wiemy już jaki tym managera miał na myśli programista. Następnie opiszmy pola klasy: _projects i _name:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/** 
 * List of all projects which manager is responsible for 
 * @private 
 * @type {Project[]} 
 */
  _projects = [];

/** 
 * Name of the manager 
 * @private
 */
  _name;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Pierwsza adnotacja jaka się pojawia to @private i oznacza ona składową prywatną klasy. Jest to zarówno informacja dla programisty używającego tej klasy, jak i dla programu generującego dokumentację, o czym się wkrótce przekonamy. Drugą adnotacją jest @type. Dzięki niej wiemy, że typem składowej _projects jest tablica obiektów typu Project. Czym jednak jest Project? jsdoc oczywiście również nie ma pojęcia, dlatego jest on kolejną rzeczą jaką musimy zdefiniować.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Definiowanie własnego typu na potrzeby adnotacji jsdoc</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/** 
 * @typedef Project 
 * @prop {string} name Name of the project 
 * @prop {number} budget Current budget for the project 
 * @prop {Date} deadline Current deadline of the project 
 */</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Adnotacja @typedef służy do definiowania typów użytkownika, jak widać przyjmuje ona jeden argument, którym jest nazwa typu. Z kolei za pomocą adnotacji @prop możemy definiować jakie pola (wraz z ich typami!) wchodzą w skład nowego typu. Po nazwie adnotacji następuje typ pola w nawiasach klamrowych, np . { string }, potem nazwa pola i jego krótki opis. Od tej pory możemy używać nowo zdefiniowanego typu w kolejnych adnotacjach, a jsdoc prawidłowo go rozpozna i wygeneruje w dokumentacji link do definicji tego typu. Nieźle! Prawdziwa siła tego narzędzia ujawnia się jednak dopiero przy opisywaniu funkcji i metod, dlatego też opiszmy konstruktor klasy Manager.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Opisujemy konstruktor oraz metody klasy Manager</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/** 
 * Creates a manager
 * @param {string} name Name of the manager
 * @param {Project[]} projects List of projects
 */
  constructor(name, projects) { ... }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Pierwsza linia adnotacji pełni zawsze domyślnie rolę krótkiego opisu. Możemy wprowadzić go także w wielu liniach za pomocą adnotacji @description. Następnie wskazujemy parametry konstruktora, wraz z ich typami, nazwami i krótkimi opisami, analogicznie jak ma to miejsce przy definiowaniu typu. Tym razem jednak definiujemy parametry metody, a nie pola typu, dlatego używamy adnotacji @param. Kolejne metody mogą zostać opisane analogicznie:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/**
 * Reduce deadline on project when DEAR CLIENT requests it
 * @param {Project} project Project to reduce deadline
 * @param {boolean} fireMalcontents Flag indicating  whether to fire 
 *  dissatisfied by this decision or not
 */
  reduceDeadline(project, fireMalcontents = false) { … }

/**
 * Cut budget on project
 * @param {Project} project Project to cut budget
 * @param {number} reducedBudget New, reduced budget value
 */
  cutBudgetOnClientRequest(project, reducedBudget) { … }

/**
 * Return all delayed projects under this  manager
 * @return {Project[]} List of delayed projects
 */
  delayedProjects() { … }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Zwróć uwagę, że możemy korzystać zarówno z typów użytkownika, zdefiniowanych wcześniej, jak i z typów wbudowanych w JavaScript (string, boolean, Date itp). Jedyną nową adnotacją jest bardzo użyteczna @return, służąca do definiowania wartości funkcji/metody, wraz z jej typem i opisem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To nie było takie trudne! Dlatego teraz zajmiemy się opisem modułu application/utils, eksportującego prostą funkcję.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Dokumentowanie modułu application/utils</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/**
 * @module application/utils
 * @description
 * This is a module with some helper functions
 */</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Taka adnotacja (@module) definiuje moduł w aplikacji, to znaczy jednostkę kodu eksportującą pewne wartości za pomocą instrukcji export. Jedyną funkcję w ramach tego modułu (dla przypomnienia, jest to funkcja unique, usuwająca duplikaty z listy) można zdefiniować taki opis:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/**
 * Removes duplicates from list
 * @function
 * @example
 * -> unique([1, 1, 2, 3, 2, 3, 4, 5, 5])
 * -> [1, 2, 3, 4, 5]
 * @param {any[]} list List of elements
 * @return {any[]} Unique  elements of original list
 */</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Dodajemy tutaj prosty opis, wskazujemy, że jest to funkcja (@function), a następnie pokazujemy przykład użycia. Bywa to szczególnie przydatne w przypadku, gdy w samym opisie trudno zwięźle zawrzeć sposób działania funkcji. Adnotacja @example tworzy w dokumentacji fragment zapisany fontem o stałej szerokości. Właśnie dlatego idealnie nadaje się do podania przykładów wywołania funkcji z różnymi argumentami oraz ich wartości dla tych przypadków. Następnie mamy znane już adnotacje @param i @return. Tym razem jako typ podajemy tablicę obiektów dowolnego typu, ponieważ funkcja unique nie ogranicza się do filtrowania napisów czy liczb, stąd jako typ pojawia się any[].</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Świetnie! Ale w jaki sposób wygenerować dokumentację?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Najprostszym sposobem na użycie jsdoc’a jest dodanie odpowiedniego wpisu w pliku package.json projektu:<br></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>"scripts": {
  …
  "jsdoc": "jsdoc -d docs/frontend -r src/",
  …
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Od tej pory dokumentację można wygenerować wydając polecenie:<br></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">npm run jsdoc<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>w konsoli. Poprzez opcję -d (bądź równoważną --destination) możemy określić katalog, w którym przechowywana będzie wygenerowana dokumentacja. Opcja -r (równoważny --recurse) oznacza, że tworząc dokumentację przeszukiwane będą wszystkie pliki wewnątrz katalogu źródłowego i jego podkatalogów. Szczegółowość generowanego dokumentu kontrolować można opcją -p (--private), kontrolującą czy w dokumentacji zamieszczać także symbole opatrzone adnotacją @private.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A tak wygląda przykładowa, końcowa dokumentacja dla naszych przykładów:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":83,"align":"center","width":787,"height":1565} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://nitrooos.pl/wp-content/uploads/2019/03/class-515x1024.png" alt="Dokumentacja klasy Manager wygenerowana przez jsdoc" class="wp-image-83" width="787" height="1565"/><figcaption>Klasa “Manager”</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {"align":"center","width":815,"height":707} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://lh5.googleusercontent.com/16JEUXqDt3t-s1ehhs2Fxm1UAyfFG6PLTe8yCP48ebkoSnhh0S6eKEW6n1ulW8nAprjKalOg73QjK2r_wWS-HrhWSXPmyN0sdFYvy5P2c1rdGuXV7PqEAJq_3e5mplxOOKlnCXLh" alt="Dokumentacja modułu application/utils wygenerowana przez jsdoc" width="815" height="707"/><figcaption>Moduł “application/utils” z funkcją “unique”</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Jak widać, wygenerowany dokument jest czytelny, i w prosty sposób możemy zobaczyć powiązanie pomiędzy informacjami zamieszczonymi w adnotacjach a tym, co widzimy w dokumentacji. Po prawej strony znajduje się nawigowane menu, dzięki któremu można przemieszczać się pomiędzy dokumentacją poszczególnych klas i modułów, sama strona dokumentacji po prawej zawiera podsumowanie zadeklarowanych funkcji/metod/typów, wraz z ich parametrami i opisem. Dzięki linkom zawsze można przeskoczyć do odpowiedniego kawałka kodu, który opisuje dokumentacja.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Źródła:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="http://usejsdoc.org/">http://usejsdoc.org/</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Od dziś praca z cudzym kodem nie będzie wymagała od Ciebie zgłębiania tajników radosnej twórczości innych deweloperów ;) Możesz tworzyć samoopisujący się kod poprzez dodanie specjalnych adnotacji - zapraszam do zapoznania się z jsdoc'iem!]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2019-03-27 20:03:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-27 19:03:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jsdoc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="dokumentacja"><![CDATA[dokumentacja]]></category>
		<category domain="category" nicename="frontend"><![CDATA[Frontend]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jsdoc"><![CDATA[jsdoc]]></category>
		<category domain="post_tag" nicename="kod"><![CDATA[kod]]></category>
		<category domain="category" nicename="na-dluzej"><![CDATA[Na dłużej]]></category>
		<category domain="category" nicename="polski"><![CDATA[Polski]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[JSDoc]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[JSDoc umożliwi Ci tworzenie samoopisującego się kodu poprzez dodanie specjalnych adnotacji. Praca z cudzym kodem nie będzie już drogą przez mękę!]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[95]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Automatyczne dzielenie wyrazów na sylaby (hyphenation) &#8211; Nitrooos]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://nitrooos.pl/2019/04/automatyczne-dzielenie-wyrazow-na-sylaby-hyphenation/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[194.88.154.182]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-04-10 21:13:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-04-10 20:13:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Na samej górze dodałem przydatne komentarze w stylu jsdoc, o których napisałem osobny wpis na blogu [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>page-builder-framework</title>
		<link>https://nitrooos.pl/2019/03/page-builder-framework/</link>
		<pubDate>Sat, 16 Mar 2019 19:42:55 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/2019/03/page-builder-framework/</guid>
		<description></description>
		<content:encoded><![CDATA[#cookie-notice {
	z-index: 10;
}

.scrolltop {
	z-index: 100;
}

.wpbf-container.wpbf-nav-wrapper {
	padding-bottom: 10px;
	padding-top: 10px;
}

.wpbf-padding-medium {
	padding-bottom: 80px;
}

.wp-block-code {
	padding: 0 0 0 10px;
}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2019-03-16 19:42:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-16 19:42:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[page-builder-framework]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[custom_css]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>favicon</title>
		<link>https://nitrooos.pl/favicon/</link>
		<pubDate>Sat, 16 Mar 2019 21:54:10 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/03/favicon.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2019-03-16 22:54:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-16 21:54:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[favicon]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/03/favicon.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/favicon.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:19:"2019/03/favicon.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>class</title>
		<link>https://nitrooos.pl/2019/03/jsdoc/class/</link>
		<pubDate>Wed, 27 Mar 2019 19:26:59 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/03/class.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2019-03-27 20:26:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-27 19:26:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[class]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>15</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/03/class.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/class.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:804;s:6:"height";i:1600;s:4:"file";s:17:"2019/03/class.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"class-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"class-151x300.png";s:5:"width";i:151;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"class-768x1528.png";s:5:"width";i:768;s:6:"height";i:1528;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:18:"class-515x1024.png";s:5:"width";i:515;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Cześć, jestem Nitrooos.</title>
		<link>https://nitrooos.pl/o-mnie/</link>
		<pubDate>Wed, 27 Mar 2019 21:27:50 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?page_id=89</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":99,"align":"right","width":188,"height":188} -->
<div class="wp-block-image"><figure class="alignright is-resized"><img src="https://nitrooos.pl/wp-content/uploads/2019/03/nitrooos.png" alt="" class="wp-image-99" width="188" height="188"/><figcaption>To ja!</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Od niemal 4 lat zawodowo zajmuję się tworzeniem stron i aplikacji internetowych. Zazwyczaj z pozycji Wszechogarniacza, który potrafi napisać sensowny frontend w Angularze/Vue.js, stworzyć logikę kodu backendowego w Pythonie, podłubać w strukturze bazy danych czy posprzątać i umieścić projektowy bałagan w eleganckich kontenerach. A do tego pamięta przesunąć odpowedni "ticket" w Jirze ;)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Doświadczenie</strong><br>Moja praca projektowa obejmuje m. in. rozbudowę i utrzymywanie aplikacji umożliwającej sprzedaż biletów na wydarzenia teatralne, współpracującej z jedną z największych marek lotniczych, przepisanie aplikacji służącej do składania wniosków o finansowanie maszyn dla światowego lidera w produkcji narzędzi do przetwarzania metalu i jego obróbki laserowej, przepisanie widoku aplikacji umożliwiającej składanie wniosków kredytowych przedsiębiorcom dla jednego z największych graczy sektora bankowego. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aktualnie Full Stack Superhero pilnujący porządku i czystości kodu jako współpracownik <strong><a href="https://stxnext.com">STX Next</a></strong>. Pełną ścieżkę zawodową można prześledzić na <a href="https://www.linkedin.com/in/bartosz-kostaniak-623b8bb0/"><strong>LinkedIn</strong></a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Kilka słów o edukacji</strong><br>Dawno, dawno temu... ukończyłem studia magisterskie na kierunku informatyka na <strong><a href="https://www.put.poznan.pl/">Politechnice Poznańskiej</a></strong> w ramach specjalności Systemy Rozproszone. A jeszcze dawniej studia inżynierskie na tym samym kierunku i uczelni. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date><![CDATA[2019-03-27 22:27:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-27 21:27:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[o-mnie]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[right]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>nitrooos</title>
		<link>https://nitrooos.pl/o-mnie/nitrooos/</link>
		<pubDate>Wed, 27 Mar 2019 21:15:01 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/03/nitrooos.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date><![CDATA[2019-03-27 22:15:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-27 21:15:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nitrooos]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>89</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/03/nitrooos.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/nitrooos.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:450;s:6:"height";i:450;s:4:"file";s:20:"2019/03/nitrooos.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"nitrooos-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"nitrooos-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>O mnie</title>
		<link>https://nitrooos.pl/2019/03/o-mnie/</link>
		<pubDate>Wed, 27 Mar 2019 21:28:52 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date><![CDATA[2019-03-27 22:28:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-27 21:28:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[o-mnie]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="kontakt"><![CDATA[Kontakt]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Hyphenation - automatyczne dzielenie wyrazów na sylaby</title>
		<link>https://nitrooos.pl/2019/04/automatyczne-dzielenie-wyrazow-na-sylaby-hyphenation/</link>
		<pubDate>Wed, 10 Apr 2019 15:00:34 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=115</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Wykonując projekty dla klienta niemieckiego spotkałem się z problemem zgodnego z gramatyką dzielenia długich wyrazów na sylaby. Ma to znaczenie, ponieważ słowa takie jak “Datenschutzerklärung”, “Zusammenfassung” czy “Änderungswunsch” nie mieszczą się w jednej linii na urządzeniach mobilnych. Strona, która nie potrafi poprawnie wyświetlać takiego tekstu jest, w odczuciu użytkowników, przygotowana nieprofesjonalne, a rozwiązaniem tego problemu jest implementacja zgodnego z gramatyką dzielenia długich wyrazów na sylaby (ang. <em>hyphenation</em>). Zaczynajmy!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Zarys rozwiązania</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Chcemy, aby rozwiązanie pozwalało włączyć mechanizm dla wybranych słów bądź zdań bezpośrednio w szablonie HTML strony, najlepiej z możliwością wskazania dodatkowych opcji, np. dzielenie na sylaby tylko N najdłuższych słów w zdaniu bądź dzielenie tylko wyrazów dłuższych niż M znaków. Mając na względzie te założenia oraz wybraną technologię (Angular), logicznie decydujemy się na użycie narzędzia pipe. Dzięki temu użycie tego mechanizmu będzie wyglądać np. tak:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>{{ 'Datenschutzerklärung' | hyphenate }}
&lt;!-- wyświetla Da•ten•schutz•er•klä•rung --></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>gdzie • oznacza specjalną encję &amp;shy­­ normalnie nie będącą wyświetlaną przez przeglądarki, ale definiującą punkty, w których może ona dokonać podziału na sylaby w razie potrzeby.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aby to uzyskać skorzystamy z biblioteki hypher (<a href="https://github.com/bramstein/hypher">https://github.com/bramstein/hypher</a>), służącej właśnie do dzielenia słów zgodnie z gramatyką wybranego języka (ang. <em>hyphenation</em>).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Czym jest Pipe w “nowym” Angularze?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zanim omówię implementację, krótka informacja nt. narzędzia pipe. Umożliwia ono transformację wartości wejściowej w zdefiniowany przez nas sposób, otrzymując nową wartość na wyjściu, gotową do wyświetlenia w szablonie. Aby stworzyć własny pipe wystarczy zadeklarować nową klasę implementującą interfejs PipeTransform z funkcją transform. W samym frameworku zdefiniowane są pewne standardowe transformacje, np. CurrencyPipe czy DatePipe, które można wykorzystywać&nbsp;w następujący sposób:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>{{ 1.23 | currency }}
&lt;!-- wyświetla '$1.23' -->

{{ dateObj | date:'medium' }}
&lt;!-- wyświetla 'Jan 27, 2019, 10:40:42 PM' --></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Nasza implementacja również będzie wykorzystywała narzędzie pipe.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Programistyczne mięcho!</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Instalacja niezbędnych paczek</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zaczynamy od instalacji biblioteki hypher wraz z potrzebnymi wzorcami językowymi (niemiecki w tym przykładzie):</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">npm install hypher hyphenation.de<br></pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>Szkielet klasy HyphenatePipe</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Następnie tworzymy plik zawierający definicję naszego pipe’a, np. hyphenate.pipe.ts, w którym na początku importujemy bilbiotekę i wzorzec językowy:<br></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-typescript"} -->
<pre class="wp-block-code language-typescript"><code>import * as Hypher from 'hypher';
import * as german from 'hyphenation.de';</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Zaraz za tym możemy rozpocząć definiowanie klasy:<br></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-typescript"} -->
<pre class="wp-block-code language-typescript"><code>/**
 * Hyphenates given text, based on Hypher library
 * @example
 *  'Finanzierungsanfrage' | hyphenate
 *  formats to: 'Fi-nan-zie-rungs-an-fra-ge'
 *  (with ­ entities in place of hyphens)
 */
@Pipe({name: 'hyphenate'})
export class HyphenatePipe implements PipeTransform {</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Dekorator @Pipe mówi kompilatorowi jaki typ klasy chcemy zaimplementować. W nawiasie podajemy obiekt konfiguracyjny z kluczem name, oznaczającym nazwę, po której będziemy odwoływać się w szablonach do pipe’a. Ważne jest też zaznaczenie implementacji interfejsu PipeTransform, zawierającego wspomnianą metodę transform. Na samej górze dodałem przydatne komentarze w stylu jsdoc, o których napisałem osobny <a href="https://nitrooos.pl/2019/03/jsdoc/" target="_blank" rel="noreferrer noopener" aria-label="wpis (otwiera się na nowej zakładce)">wpis</a> na blogu :)<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Następnie mamy sekcję inicjalizacyjną:<br></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-typescript"} -->
<pre class="wp-block-code language-typescript"><code>private hyphenator: Hypher = null;
private hyphenChar = '\u00AD';

constructor() {
  this.hyphenator = new Hypher(german);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Tu słowo wyjaśnienia: aby móc korzystać z biblioteki hypher, musimy stworzyć obiekt klasy Hypher z parametrem wzorca językowego. Stąd pole obiektu o nazwie hyphenator. Natomiast ‘\u00AD’ jest znakiem “miękkiego” łącznika (encja &amp;shy­). Jest to znak niewyświetlany normalnie przez przeglądarkę, ale zaznaczający miejsce, w którym może ona dokonać podziału na sylaby w razie potrzeby.<br></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-typescript"} -->
<pre class="wp-block-code language-typescript"><code>/**
 * Hyphenates given text
 * @param {string} text Text to hyphenate
 * @param {HyphenateOptions} options
 *  Optional. Additional options can be specified here.
 */
transform(text: string, options: HyphenateOptions = {}): string {</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Najważniejszą metodą klasy jest transform, która to posiada 2 parametry: value typu string, czyli wartość wejściową dla pipe’a, która będzie przekształcana oraz options typu HyphenateOptions, czyli opcje definiujące dodatkowe zachowanie.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Dodatkowe opcje pipe'a - interfejs HyphenateOptions</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-typescript"} -->
<pre class="wp-block-code language-typescript"><code>/**
 * @desc Options which can be given into hyphenate pipe
 * @prop {number} onlyNLongest Hyphenate only N longest words from given text
 * @prop {number} longerThan Hyphenate only words longer than N characters
 */
interface HyphenateOptions {
  onlyNLongest?: number;
  longerThan?: number;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Oznacza to, że nasz pipe będzie miał możliwość ograniczenia mechanizmu dzielenia na sylaby tylko do wyrazów dłuższych niż M znaków oraz dla tylko N najdłuższych wyrazów w zdaniu. Opcje te będzie można przekazywać do pipe’a za pomocą konstrukcji value | hyphenate:{ longerThan: M, onlyNLongest: N }.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Punkt kulminacyjny, czyli implementacja metody transform</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-typescript"} -->
<pre class="wp-block-code language-typescript"><code>transform(text: string, options: HyphenateOptions = {}): string {
  const words = text.split(/\s+/);
  const hyphenateNLongest = Math.min(
    words.length, options.onlyNLongest || words.length
  );
  const hyphenateLongerThan = options.longerThan || 0;
  const wordsToHyphenate = words
   .concat()
   .sort((word1, word2) => word2.length - word1.length)
   .slice(0, hyphenateNLongest)
   .filter(word => word.length > hyphenateLongerThan);
  return words
    .map(word => {
      if (wordsToHyphenate.indexOf(word) !== -1) {
        return this.hyphenator.hyphenate(word).join(this.hyphenChar);
      }
      return word;
    })
    .join(' ');
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Ponieważ przekazanie dodatkowych opcji nie jest obowiązkowe, domyślnie dzielone na sylaby są wszystkie wyrazy. Osiągane jest to poprzez ustawienie opcja onlyNLongest na równą liczbie słów a longerThan na 0. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Poprzez użycie metody concat na tablicy words tworzymy jej kopię, którą następnie sortujemy. Jest to potrzebne, ponieważ operacja sortowania zmienia kolejność elementów oryginalnej tablicy. Następnie wybieramy z niej tylko N najdłuższych wyrazów a ostatecznie filtrujemy tak, aby na końcu znalazły się tylko wyrazy dłuższe niż M znaków. Sam proces dzielenia na sylaby (główna instrukcja return) polega na utworzeniu nowej tablicy na podstawie tablicy słów z wejścia (words). W kroku tym (operacja .map(word =&gt; …) sprawdzamy czy powinniśmy podzielić dane słowo (czy znajduje się w tablicy wordsToHyphenate). Jeśli tak to wywołujemy metodę hyphenate na obiekcie this.hyphenator (czyli obiekcie bibliotecznym), a otrzymaną tablicę sylab łączymy znakiem “miękkiego” łącznika (ang. <em>soft hyphen</em>, encja &amp;shy­). Jeśli słowo nie powinno zostać podzielone to zwracamy je bez transformacji (return word). Ostatnim krokiem jest połączenie tablicy słów na pomocą spacji (.join(‘ ‘)).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Myślę, że przedstawione przeze mnie rozwiązanie jest całkiem eleganckie i również Wam przypadnie do gustu. Tym bardziej, że sytuacje, w których może się przydać, z mojego doświadczenia, nie są wcale takie rzadkie. Wbudowana w Angular możliwość definiowania własnych pipe’ów sprawdza się tutaj idealnie. Dodatkowe, opcjonalne parametry, które możemy przekazać pozwalają na stworzenie rozwiązania elastycznego i rozszerzalnego. Dzięki, że dobrnęliście aż do końca, miłego dnia wszystkim!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Aplikacje tłumaczone na niektóre języki (m. in. skandynawskie, ale także niemiecki) muszą poradzić sobie z poprawnym wyświetlaniem wyrazów dłuższych niż niejedno zdanie :) Jak to zrobić? Dowiecie się już dziś!]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date><![CDATA[2019-04-10 16:00:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-10 15:00:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[automatyczne-dzielenie-wyrazow-na-sylaby-hyphenation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="angular"><![CDATA[angular]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="frontend"><![CDATA[Frontend]]></category>
		<category domain="post_tag" nicename="hyphenate"><![CDATA[hyphenate]]></category>
		<category domain="category" nicename="na-dluzej"><![CDATA[Na dłużej]]></category>
		<category domain="post_tag" nicename="pipe"><![CDATA[pipe]]></category>
		<category domain="category" nicename="polski"><![CDATA[Polski]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Hyphenation]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Hyphenation, czyli rozwiązanie problemu poprawnego wyświetlania długich wyrazów w niektórych językach (np. skandynawskich, ale też niemieckim). Zapraszam 🙂]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[73]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[241]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[HyphenationPipe - uzupełnienie do ostatniego wpisu | Nitrooos]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://nitrooos.pl/2019/05/hyphenation-uzupelnienie/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[194.88.154.182]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-05-15 20:12:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-05-15 19:12:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Hyphenation &#8211; automatyczne dzielenie wyrazów na sylaby [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>Mechanizm uwierzytelniania na serwerach przedprodukcyjnych</title>
		<link>https://nitrooos.pl/2019/04/mechanizm-uwierzytelniania-na-serwerach-przedprodukcyjnych/</link>
		<pubDate>Wed, 24 Apr 2019 15:00:10 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=134</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Rozpoczynając nowy projekt często pojawia się potrzeba zorganizowania osobnych instancji naszej aplikacji, dostępnych wyłącznie dla testerów bądź klientów końcowych. Z założenia mają one służyć testowaniu i sprawdzaniu <del>wypocin</del> efektów naszej wielogodzinnej i oddanej pracy. Właśnie wtedy przyda się nam wiedza w jaki sposób ograniczyć dostęp do takich przed-produkcyjnych serwerów w prosty i skuteczny sposób. Potrzebny nam jest <strong>mechanizm uwierzytelniania użytkowników</strong> w dostępie do strony.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>"Basic Access Authentication"</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Czyli, prościej mówiąc, wyskakujące okienko z pytaniem o nazwę użytkownika i hasło, gdy tylko próbujemy wejść pod dany adres. Wydaje się zbyt proste i piękne, aby było prawdziwe? Cóż, rzeczywiście ten mechanizm uwierzytelniania posiada pewien haczyk. Mianowicie dane (tj. nazwa użytkownika i hasło) przesyłane są przez przeglądarkę w formie zakodowanej w base64. I nic więcej. Oznacza to, że ten sposób <strong>wymaga włączenia przez nas obsługi protokołu HTTPS i każdorazowe przekierowywanie żądań HTTP na HTTPS</strong>. Dlaczego? Ponieważ dane przesyłane poprzez HTTP nie są w żaden sposób chronione, a samo kodowanie base64 jest banalne do odwrócenia. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Istnieje <a href="https://www.base64decode.org/">wiele</a> stron, na których możemy samodzielnie zakodować oraz odkodować dane w tym formacie. Z zalet z kolei możemy jednak wymienić to, że, dla naszej wygody, przeglądarka zapamiętuje wpisane dane. Ma to znaczenie, ponieważ, jeśli były poprawne, wysyła je automatycznie przy kolejnych żądaniach uwierzytelnienia. Dzięki temu nie będziemy musieli wpisywać ich za każdą próbą dostępu do serwera. Dodatkowo, możemy zdefiniować wiele par &lt;nazwa użytkownika, hasło&gt; i nadawać im dostępy np. tylko do niektórych elementów strony.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Stworzenie pliku z listą użytkowników i ich haseł</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zacząć należy od stworzenia odpowiedniego pliku (nazywanego zwyczajowo .htpasswd), zawierającego definicje par &lt;nazwa użytkownika, hasło&gt;, którym zezwalamy na dostęp do strony. Najprościej wygenerować go za pomocą narzędzia htpasswd, dostępnego na Ubuntu w pakiecie apache2-utils:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">sudo apt-get install apache2-utils<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Teraz możemy stworzyć odpowiedni plik wraz z pierwszym użytkownikiem:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">htpasswd -c .htpasswd nitrooos</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Zostaniemy poproszeni o wpisanie hasła dla nowego użytkownika i jego powtórzenie. Po zatwierdzeniu wpis dla użytkownika nitrooos będzie gotowy :) Kolejnych użytkowników można doadć poprzez ponowne wykonanie powyższej komendy, ale bez przełącznika -c. Odpowiada on bowiem za utworzenie nowego pliku o podanej nazwie. Przykładowa zawartość pliku .htpasswd wygląda następująco:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">nitrooos:$apr1$4gKNcA2h$rhk7RtslHU4m.6EAs6T7j.<br>admin:$apr1$pLzt4H94$R6wTAUQphdWjvavOphViX.</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>Włączamy mechanizm uwierzytelniania w konfiguracji serwera sieciowego</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Kolejnym krokiem jest włączenie mechanizmu w konfiguracji serwera HTTP. Dla każdego z nich robi się to inaczej, niemniej jednak pokażę przykładowe opcje konfiguracje dla Apache oraz nginx. W przypadku serwera Apache należy w pliku konfiguracji odpowiedniego wirtualnego hosta dodać sekcję &lt;Directory&gt; ze wskazaniem ścieżki, pod którą rezyduje plik .htpasswd (/etc/apache2/.htpasswd w tym przykładzie):</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-apache"} -->
<pre class="wp-block-code lang-apache"><code>&lt;VirtualHost *:80>
    DocumentRoot /var/www/html
    ...
    &lt;Directory "/var/www/html">
        AuthType Basic
        AuthName "Restricted Content"
        AuthUserFile /etc/apache2/.htpasswd
        Require valid-user
    &lt;/Directory>
&lt;/VirtualHost></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>W przypadku serwera nginx należy do odpowiedniej sekcji location dodać wpisy auth_basic oraz auth_basic_user_file. Plik .htpasswd znajduje się w tym przypadku pod ścieżką /etc/nginx/conf.d/.htpasswd:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-nginx"} -->
<pre class="wp-block-code lang-nginx"><code>location / {
    auth_basic "Restricted content";
    auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
    ...
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Po dokonaniu tych zmian serwer należy oczywiście zrestartować:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">sudo service apache2 restart<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>lub też:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">sudo service nginx restart</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Jeśli wszystko poszło po naszej myśli, w tym momencie dostęp do naszej witryny będzie chroniony przez mechanizm uwierzytelniania Basic Access Authentication. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Przekierowanie ruchu HTTP na HTTPS</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jak napisałem na początku, metoda ta wymaga obsługi ruchu poprzez protokół HTTPS. Oznacza to konieczność zdobycia odpowiedniego certyfikatu oraz włączenie go w konfiguracji serwera sieciowego. Nie jest to tematem tego wpisu, należy jednak pamiętać o stworzeniu przekierowania ruchu HTTP na HTTPS (przykład dla serwera nginx):</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-nginx"} -->
<pre class="wp-block-code lang-nginx"><code>server {
    listen [::]:80;
    listen 80;
    rewrite ^ https://$host$request_uri? permanent;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Bonus: ciastko sesyjne jako podstawowy mechanizm uwierzytelniania</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Alternatywą dla powyższej metody może być ustawianie w przeglądarce użytkownika specjalnego ciastka sesyjnego. Taki plik (ang. <em>cookie</em>) o ustalonej wartości, wymagany będzie aby uzyskać dostęp do serwisu. Bezpieczniejsza wersja zakłada, że użytkownik samemu ustawia sobie takie ciastko, np. w kosoli JavaScript przeglądarki, wersja prostsza to po prostu udostępnienie pod specjalnym adresem strony ustawiającej ciastko za nas. Oczywiście ta metoda nie wyklucza stosowania poprzedniej. Na potrzeby prezentacji załóżmy, że ciastko uwierzytelniające, wymagane przez serwer posiada nazwę "TestServerAuthCookie" i wartość "test_server_granted".</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Ustawianie ciastka sesyjnego przez użytkownika w konsoli JavaScript</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W tym scenariuszu użytkownik, aby uzyskać dostęp do strony, musi po wejściu pod jej adres uruchomić narzędzia deweloperskie przeglądarki (np. DevTools w Google Chrome), przejść do zakładki "Console" i wkleić prosty kawałek kodu:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-javascript"} -->
<pre class="wp-block-code lang-javascript"><code>document.cookie = "TestServerAuthCookie=test_server_granted";</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Oczywiście w rzeczywistej implementacji nazwa i wartość ciastka nie powinny być tak przewidywalne i łatwe do odgadnięcia. Do tego dochodzi jeszcze konieczność odpowiedniego skonfigurowania serwera sieciowego tak, aby sprawdzał czy wymagane ciastko jest obecne w parametrach żądania HTTP. W przypadku serwera Apache odpowednie reguły wyglądają tak:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-apache"} -->
<pre class="wp-block-code lang-apache"><code>RewriteCond %{HTTP_COOKIE} !TestServerAuthCookie=test_server_granted
RewriteRule .* - [NC,L,F]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Natomiast dla nginx'a są następujące:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-nginx"} -->
<pre class="wp-block-code lang-nginx"><code>location / {
    if ($http_cookie !~ 'TestServerAuthCookie=test_server_granted') {
        return 403;
    }
    ...
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Oznacza to, że próbując uzyskać dostęp do naszego serwisu otrzymamy status błędu 403 Forbidden za każdym razem, gdy w żądaniu nie znajdzie się ciastko o pożądanej nazwie i wartości.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Specjalny link uwierzytelniający</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zwróćmy uwagę, że podany powyżej sposób może być dość niewygodny. Wymaga on otwierania konsoli przeglądarki za każdym razem, gdy potrzebujemy się uwierzytelnić na serwerze. Może być to uciążliwe np. dla osób testujących naszą aplikację, ponieważ często korzystają oni z trybu incognito, który to stanowi nową, osobną sesję. W związku z tym ustawianie ciastka sesyjnego wymagane jest po każdorazowej inicjalizacji trybu incognito. Aby nieco ułatwić życie takim <del>maruderom</del> osobom, możemy stworzyć osobny URL ustawiający wymagane ciastko w przeglądarce automatycznie. Rozwiązanie to jest o tyle wygodniejsze, że link taki można zapamiętać i ustawić np. na pasku zakładek przeglądarki. Dzięki temu proces kontroli dostępu sprowadzi się do jednego kliknięcia w przycisk. Prościej już się nie da :)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Stwórzmy więc osobną ścieżkę na serwerze i zwróćmy z niej dokument HTML, zawierający skrypt ustawiający wymaganą wartość ciastka. Zacząć należy od utworzenia pliku site_login.html, zawierającego prosty skrypt JavaScript, ustawiający ciastko sesyjne. Plik ten powinien wyglądać np. tak:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-html"} -->
<pre class="wp-block-code lang-html"><code>&lt;html>
&lt;body>
    &lt;script>
        document.cookie = 'TestServerAuthCookie=test_server_granted';
        window.location.replace('http://test.our.gretest.web.service');
    &lt;/script>
&lt;/body>
&lt;/html></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Następnie należy zdefiniować w konfiguracji serwera regułę, która w przypadku wejścia pod specjalny adres (link uwierzytelniający) dokona przekierowania pod /site_login.html. W przypadku serwera Apache konfiguracja wygląda tak:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>RewriteCond "%{REQUEST_URI}" "!=/authentication_link_QRSvD44xNedyEeqmyGWtevidLbmeUG1NGaeVeEtJ.html"
RewriteCond %{HTTP_COOKIE} !TestServerAuthCookie=test_server_granted
RewriteRule .* /site_login.html [NC,L,F]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Natomiast dla nginx'a prezentuje się następująco:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-nginx"} -->
<pre class="wp-block-code lang-nginx"><code>location /authentication_link_QRSvD44xNedyEeqmyGWtevidLbmeUG1NGaeVeEtJ.html {
    add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";
    return 200 /site_login.html;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Jeśli wejdziemy pod specjalny adres (link uwierzytelniający, tutaj /authentication_link_QRSvD44xNedyEeqmyGWtevidLbmeUG1NGaeVeEtJ.html), serwer zwróci prosty dokument HTML. Skrypt w nim zawarty automatycznie ustawi ciastko sesyjne na pożądaną wartość, po czym dokona przekierowania (window.location.replace) na stronę główną naszego serwisu. Proste i wygodne. Dodatkowo ustawiamy nagłówek odpowiedzi X-Robots-Tag na wartość "noindex, nofollow, nosnippet, noarchive". Sprawi to, że roboty indeksujące, nawet jeśli zbłądzą i odnajdą nasz link, nie zaindeksują go w żaden sposób.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pokazałem kilka pomysłów, jak może być zorganizowany mechanizm uwierzytelniania użytkowników w dostępie do serwerów, na których serwujemy wersje deweloperskie/testowe/przedprodukcyjne naszych aplikacji. Są to oczywiście rady dość proste, które jednak mogą stanowić dobry punkt wyjścia w temacie uwierzytelniania użytkowników serwerów testowych. Dla osób chcących zachować większe bezpieczeństwo bądź kontrolę nad tym, kto dokładnie, kiedy może uzyskać dostęp czy też chcących logować zdarzenia dostępu do strony, mogą okazać się niewystarczające. Czasami jednak, gdy pracuje się pod presją czasu, lepsze jest takie rozwiązanie niż żadne. Natomiast dla niektórych projektów może okazać się wręcz wystarczające. Cieszę się, że mogłem podzielić się z Wami swoją wiedzą! Jendocześnie zapraszam do śledzenia bloga i czekania na kolejne wpisy, bo one już niedługo :)</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Jak prosto i skutecznie ograniczyć dostęp do naszego serwera testowego/przedprodukcyjnego? Zapraszam na garść szybkich pomysłów!]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date><![CDATA[2019-04-24 16:00:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-24 15:00:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mechanizm-uwierzytelniania-na-serwerach-przedprodukcyjnych]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="basic-auth"><![CDATA[basic auth]]></category>
		<category domain="category" nicename="bezpieczenstwo"><![CDATA[Bezpieczeństwo]]></category>
		<category domain="post_tag" nicename="bezpieczenstwo"><![CDATA[bezpieczeństwo]]></category>
		<category domain="post_tag" nicename="cookie"><![CDATA[cookie]]></category>
		<category domain="category" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="category" nicename="polski"><![CDATA[Polski]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Mechanizm uwierzytelniania]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jak prosto i skutecznie ograniczyć dostęp do serwera testowego/przedprodukcyjnego? Post opisuje jak zaimplementować mechanizm uwierzytelniania użytkowników.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[73]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[238]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>workflow</title>
		<link>https://nitrooos.pl/2019/05/zarzadzanie-wydaniami-git/workflow/</link>
		<pubDate>Wed, 24 Apr 2019 18:34:46 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/04/workflow.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2019-04-24 19:34:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-24 18:34:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[workflow]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>202</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/04/workflow.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/workflow.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:900;s:6:"height";i:2400;s:4:"file";s:20:"2019/04/workflow.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"workflow-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"workflow-113x300.png";s:5:"width";i:113;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"workflow-768x2048.png";s:5:"width";i:768;s:6:"height";i:2048;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"workflow-384x1024.png";s:5:"width";i:384;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Git-Logo-2Color</title>
		<link>https://nitrooos.pl/2019/05/zarzadzanie-wydaniami-git/git-logo-2color/</link>
		<pubDate>Fri, 03 May 2019 21:40:23 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/05/Git-Logo-2Color.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2019-05-03 22:40:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-03 21:40:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[git-logo-2color]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>202</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/05/Git-Logo-2Color.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/Git-Logo-2Color.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:910;s:6:"height";i:380;s:4:"file";s:27:"2019/05/Git-Logo-2Color.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"Git-Logo-2Color-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"Git-Logo-2Color-300x125.png";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:27:"Git-Logo-2Color-768x321.png";s:5:"width";i:768;s:6:"height";i:321;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>modal</title>
		<link>https://nitrooos.pl/2019/04/mechanizm-uwierzytelniania-na-serwerach-przedprodukcyjnych/modal/</link>
		<pubDate>Fri, 03 May 2019 21:56:56 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/04/modal.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2019-05-03 22:56:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-03 21:56:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[modal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>134</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/04/modal.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/modal.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:450;s:6:"height";i:242;s:4:"file";s:17:"2019/04/modal.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"modal-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"modal-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>featured</title>
		<link>https://nitrooos.pl/2019/04/automatyczne-dzielenie-wyrazow-na-sylaby-hyphenation/featured/</link>
		<pubDate>Sat, 04 May 2019 11:47:42 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/04/featured.png</guid>
		<description></description>
		<content:encoded><![CDATA[Przykład wyrazu podzielonego na sylaby]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2019-05-04 12:47:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-04 11:47:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[featured]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>115</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/04/featured.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/featured.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:345;s:6:"height";i:103;s:4:"file";s:20:"2019/04/featured.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"featured-150x103.png";s:5:"width";i:150;s:6:"height";i:103;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"featured-300x90.png";s:5:"width";i:300;s:6:"height";i:90;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Da-ten-schutz-er-klä-rung]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>svg-logo</title>
		<link>https://nitrooos.pl/2019/05/ikony-w-aplikacji-internetowej/svg-logo/</link>
		<pubDate>Sun, 12 May 2019 13:37:23 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/05/svg-logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2019-05-12 14:37:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-12 13:37:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[svg-logo]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>261</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/05/svg-logo.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/svg-logo.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:20:"2019/05/svg-logo.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"svg-logo-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"svg-logo-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Logo formatu SVG]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>pixelized</title>
		<link>https://nitrooos.pl/2019/05/ikony-w-aplikacji-internetowej/pixelized/</link>
		<pubDate>Thu, 23 May 2019 19:32:05 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/05/pixelized.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date><![CDATA[2019-05-23 20:32:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-23 19:32:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pixelized]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>261</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/05/pixelized.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/pixelized.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:160;s:6:"height";i:128;s:4:"file";s:21:"2019/05/pixelized.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"pixelized-150x128.png";s:5:"width";i:150;s:6:"height";i:128;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Ikona ołówka w normalnym rozmiarze i powiększona]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>icon_spritesheet</title>
		<link>https://nitrooos.pl/2019/05/ikony-w-aplikacji-internetowej/icon_spritesheet/</link>
		<pubDate>Thu, 23 May 2019 19:42:00 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/05/icon_spritesheet.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date><![CDATA[2019-05-23 20:42:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-23 19:42:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[icon_spritesheet]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>261</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/05/icon_spritesheet.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/icon_spritesheet.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:408;s:6:"height";i:300;s:4:"file";s:28:"2019/05/icon_spritesheet.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"icon_spritesheet-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"icon_spritesheet-300x221.png";s:5:"width";i:300;s:6:"height";i:221;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Spritesheet jako bitmapa z ikonami]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>geolocalization</title>
		<link>https://nitrooos.pl/2019/06/geolokalizacja-geolite2/geolocalization/</link>
		<pubDate>Thu, 20 Jun 2019 15:55:03 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/wp-content/uploads/2019/06/geolocalization.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date><![CDATA[2019-06-20 16:55:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-20 15:55:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[geolocalization]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>311</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://nitrooos.pl/wp-content/uploads/2019/06/geolocalization.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/06/geolocalization.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:128;s:6:"height";i:127;s:4:"file";s:27:"2019/06/geolocalization.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Ikona ZIemi]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Jenkins - ciągła integracja w kontekście testów aplikacji</title>
		<link>https://nitrooos.pl/?p=346</link>
		<pubDate>Wed, 17 Jul 2019 18:00:05 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=346</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date><![CDATA[2019-07-17 19:00:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-17 18:00:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jenkins-ciagla-integracja]]></wp:post_name>
		<wp:status><![CDATA[future]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="bezpieczenstwo"><![CDATA[Bezpieczeństwo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jenkins]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Artykuł opisuje integrację serwera Jenkins z aplikacją tak, aby automatycznie uruchamiał testy przy każdej zmianie wprowadzonej do repozytorium.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Zarządzanie wydaniami aplikacji - Git workflow</title>
		<link>https://nitrooos.pl/2019/05/zarzadzanie-wydaniami-git/</link>
		<pubDate>Wed, 08 May 2019 20:00:05 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Nieodłącznym elementem naszej ciężkiej, programistycznej pracy jest wgrywanie ukończonych zadań na serwery testowe/przedprodukcyjne, a w końcu na produkcję. Jeśli jesteśmy szczęściarzami, to zadanie po przejściu etapu testów po stronie klienta trafia jak najszybciej na staging a następnie prosto na produkcję. W takim przypadku zarządzanie wydaniami sprowadza się do uaktualniania gałęzi odpowiadających stanom poszczególnych serwerów, np. "develop", "staging" i "production". Niestety, w swojej praktyce często spotykałem sytuację, gdy klient zmieniał zdanie co do kolejności wypuszczania kolejnych zadań. Z dnia na dzień. Z serwera na serwer. Zbiór zadań znajdujących się na serwerze testowym był znacząco różny od zbioru zadań z przedprodukcji. Ten z kolei różnił się od ostatecznej wersji tego, co powinno zostać wgrane na produkcję.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To właśnie z potrzeby bezkonfliktowej współpracy w takich warunkach zrodził się proponowany przeze mnie schemat zarządzania wydaniami. Ma on swoją reprezentację w odpowiedniej organizacji gałęzi w systemie kontroli wersji, w naszym przypadku będzie to git.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Zarządzanie wydaniami w praktyce</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Dzisiejszy wpis jest zapiskiem zarządzania gałęziami dla standardowego zadania (nazwijmy je "task 1") przy zachowaniu opisanych powyżej założeń:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>w każdej chwili chcemy mieć możliwość wgrania <em>dowolnego</em> zadania na serwer testowy (i tylko jego)</li><li>przygotowując wgrywkę (ang. <em>deploy</em>) na serwer przedprodukcyjny chcemy mieć możliwość wyboru dowolnego zbioru zadań przetestowanych na serwerze testowym</li><li>to samo co powyżej dotyczy przygotowania wgrywki na serwer produkcyjny</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="mce_6">Od początku - tworzymy gałąź dla zadania!</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zakładamy, że główną gałęzią, odzwierciedlającą stan serwera produkcyjnego (ang. <em>live</em>) jest gałąź <em>master</em>. W tym scenariuszu tworzymy nową gałąź dla zadania (nazwijmy ją <em>task_1</em>), wychodzącą z gałęzi <em>master</em>:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">git checkout master<br>git pull origin master<br>git checkout -b task_1</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Ważne jest, aby uaktualnić lokalny stan gałęzi <em>master</em>, najprościej zrobić to poprzez wydanie polecenia "git pull origin master". Dzięki temu mamy pewność, że pracujemy na aktualnej wersji kodu napędzającej produkcję.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Praca nad zadaniem</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Od tej pory możemy pracować spokojnie nad zadaniem <em>task_1.</em> W razie potrzeby rozpoczęcia prac nad kolejnym zadaniem powtarzamy procedurę, tworząc nową gałąź i wychodząc ponownie z <em>master</em>'a. Warto w tym miejscu zaznaczyć, że nie należy traktować gita jako narzędzia do archiwizacji wersji kodu "co jakiś czas", "po skończeniu zadania" czy "na koniec dnia". Róbmy commity często, zawierajmy w nich niewielkie, spójne zmiany kodu oraz opatrzmy je krótkim, jasnym komentarzem. Jest to bardzo pomocne w przypadku, gdy zmiany z naszego zadania powodują powstanie błędów regresyjnych. Niewielkie, dobrze opisane commity pomogą odnaleźć dokładną wersję kodu powodującą powstanie błędu. Łatwiejsze będzie także zrozumienie przyczyny jego powstania i jej usunięcie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Wgrywka na serwer testowy (opcjonalnie)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Sprawdzonym przeze mnie schematem jest utrzymywanie serwera testowego, na którym klienci mogą testować nasze zadania. Serwer taki z założenia służy do testowania jednego zadania "na raz". Ma to znaczenie, ponieważ chcemy mieć maksymalną dowolność w doborze zadań, mających być następnie wgranymi na serwer przedprodukcyjny. Nie chcemy po prostu mergować ich do wspólnej gałęzi, tak, aby pozostały niezależne od siebie. Wadą jest oczywiście to, że serwer taki odzwierciedla w danej chwili jedynie stan produkcji + maksymalnie jednego nowego zadania. Z praktyki wiem jednak też, że nie jest to duża wada, szczególnie jeśli skonfigurujemy narzędzie CD (ang. <em>Continous Delivery</em>). Można zrobić to za pomocą np. Jenkinsa, zewnętrznego serwisu (<a href="https://travis-ci.com">Travis CI</a>, <a href="http://codeship.com">Codeship</a>, <a href="https://circleci.com">Circle CI</a>) bądź własnych skryptów, umożliwiając wgrywanie zmian w ciągu kilku minut. Ważne jest, aby <strong>nie mergować takich zadań do żadnej wspólnej gałęzi</strong>. Wgrywanie zmian na serwer testowy powinno odbywać się poprzez wybór gałęzi z zadaniem (czyli np. <em>task_1</em> lub <em>task_2</em>). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pozostaje kwestia ograniczenia dostępu do takiego serwera, o czym napisałem kilka słów w osobnym <a href="https://nitrooos.pl/2019/04/mechanizm-uwierzytelniania-na-serwerach-przedprodukcyjnych/">wpisie</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Przygotowanie wgrywki na serwer przedprodukcyjny</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Aby przygotować wgrywkę na serwer przedprodukcyjny korzystamy z dedykowanej gałęzi, w naszym przykładzie nazwanej <em>rc_1</em>. Takich gałęzi, służących do wgrywania zmian na serwer przedprodukcyjny może być więcej w razie potrzeby. Osobiście, standardowo nazywam je <em>rc_2</em>, <em>rc_3</em> itd. Są one przydatne w sytuacji, gdy na staging wgrano np. zmiany składające się na zadania 1, 2 i 3, po czym klient chce wgrać na produkcję tylko zadania 1 i 3. W takim przypadku tworzymy np. na gałęzi <em>rc_2</em> (zawsze wychodzącej z aktualnego stanu gałęzi podstawowej, <em>master</em>!) nowy release, składający się tylko z zadań 1 i 3. Więcej o takim przypadku napisałem w kolejnym punkcie tego wpisu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Przygotowanie wgrywki na serwer przedprodukcyjny sprowadza się do zmergowania zadań, które mają się w nim znaleźć do odpowiedniej gałęzi (najczęściej <em>rc_1</em>). Wgrywany na serwer jest aktualny stan wybranej gałęzi <em>rc_*</em>. Na tym etapie możemy dobrać dowolne spośród gotowych zadań.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Testowanie na serwerze przedprodukcyjnym</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Wgrywanie zmian na produkcję musi być poprzedzone przetestowaniem ich na serwerze przedprodukcyjnym. Najlepiej aby zajął się tym profesjonalny tester manualny. Świetnie sprawdzają się napisane specjalnie do tego celu testy automatyczne (end-to-end). Do ich stworzenia polecić mogę np. narzędzie <a href="https://www.cypress.io/">cypress</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Klient zmienił zdanie! Mamy wgrać na produkcję inny zbiór zadań...</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Czasami zdarza się, że priorytet jednego z zadań/część zadań wgranych na serwer przedprodukcyjny ulega zwiększeniu. Powinniśmy w takim wypadku wgrać je na produkcję <em>jak najszybciej</em>. Dla przykładu, wgrano na serwer przedprodukcyjny zadania 1, 2 oraz 3. Teraz jednak na produkcję powinny zostać wgrane tylko zadania 1 i 3. Prawidłowym postępowaniem w takiej sytuacji jest przygotowanie nowego release'u np. na gałęzi <em>rc_2</em>, zawierającego tylko zadania 1 i 3 (uzyskały większy priorytet), dokonanie wgrywki na serwer przedprodukcyjny z gałęzi <em>rc_2</em> i testowanie. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dlaczegóżby jednak nie wgrać od razu na produkcję zadań 1 i 3, szczególnie jeśli zostały już przetestowane? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Po pierwsze, nie chcemy przenosić na gałąź <em>master</em> zmian ręcznie, commit po commicie wybranych zadań. Musielibyśmy to zrobić, ponieważ gałąź <em>rc_1</em> zawiera zmiany także z zadania 2, które jednak nie powinno znaleźć się teraz na produkcji. Można to zrobić np. za pomocą komendy <em>git cherry-pick,</em> jest to jednak sposób długotrwały i podatny na błędy. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Po drugie, zadania 1 i 3 mogą być zależne zadania 2, które teraz należy pominąć. Możliwa jest więc sytuacja, w której wgrane razem zadania 1, 2 i 3 działają bez zarzutu, jednak bez zadania 2. pojawiają się błędy. Ważne jest więc, aby na produkcję <strong>wgrywać tylko stan kodu, który był już wcześniej sprawdzony</strong> na serwerze przedprodukcyjnym. Wgranie tylko zadań 1 i 3 w naszym przykładzie byłoby błędem. Jest tak dlatego, że sprawdzone zostało tylko działanie ich razem z zadaniem 2. Nie oznacza to automatycznie, że również bez niego wszystko będzie działać poprawnie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Wgrywka na produkcję</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Ostatnim etapem jest wgranie zmian na produkcję, którego dokonujemy na żądanie klienta oraz, powtórzę raz jeszcze, <strong>tylko po wcześniejszym przetestowaniu identycznej wersji kodu na serwerze przedprodukcyjnym</strong>. Rozpoczynamy oczywiście od zmergowania gałęzi zawierającej wersję kodu testowaną na serwerze przedprodukcyjnym (np. <em>rc_1</em>) do gałęzi <em>master</em>. Następnie proponuję tagowanie wersji na gałęzi <em>master</em>, tak, aby kolejne release'y kodu były uporządkowane, ponumerowane i odpowiednio opisane. Do stworzenia tagów w Gicie służy komenda:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">git tag -a v0.1 -m 'Minimal Valueable Product'<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Natomiast aby wgrać je do zdalnego repozytorium możemy posłużyć się komendą:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">git push origin v0.1</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Narzędzie służące do przygotowania wgrywki na produkcję powinno akceptować nazwę tagu jako parametr. Dzięki temu wgrywane będą tylko przygotowane w tym celu, odpowiednie wersje kodu.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Zarządzanie wydaniami na konkretnym przykładzie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pokażę jeszcze przykład zarządzania wydaniami na przykładzie 4 zadań, 2 wgrywek na serwer przedprodukcyjny i 2 wgrywek na produkcję. Sytuację przedstawia poniższy schemat:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":218,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://nitrooos.pl/wp-content/uploads/2019/04/workflow-384x1024.png" alt="Zarządzanie wydaniami w systemie kontroli wersji - historia prac nad zadaniami" class="wp-image-218"/><figcaption>Przykładowa historia prac nad zadaniami i zarządzania ich gałęziami</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Gałęzie <em>rc_1</em> i <em>rc_2</em> służą do przygotowania wgrywek na przedprodukcyjny serwer, gałąź <em>master</em> odzwierciedla stan kodu na produkcji, gałęzie z zadaniami nazywają się <em>task_1</em>, <em>task_2</em>, <em>task_3</em> i <em>task_4</em>. Linia przerywana czerwona oznacza okres testowania zadania na serwerze testowym. Linia przerywana szara oznacza, że zadanie jest gotowe, ale aktualnie nie jest wgrane na serwer testowy. Jak pamiętamy, może na nim być jednocześnie wgrane tylko 1 zadanie. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Analiza krok po kroku</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Rozpoczęto pracę nad zadaniem <em>task_1</em> (wychodząc nową gałęzią z <em>master</em>'a), ukończono pracę i wgrano na serwer testowy. W międzyczasie rozpoczęto pracę nad kolejnym zadaniem (<em>task_2</em>). Po ukończeniu pracy zostało ono wgrane na serwer testowy (zamiast zadania <em>task_1</em> - linia przerywana szara). W trakcie gdy na serwerze testowym znajdowało się zadanie <em>task_2</em>, rozpoczęto pracę nad priorytetowym zadaniem <em>task_3 (hotfix)</em>. Zadania <em>task_1</em> i <em>task_2</em> zostały zmergowane do gałęzi <em>rc_1</em>. Po zakończeniu prac nad zadaniem <em>task_3</em> i przetestowaniu go na serwerze testowym zmergowano go do gałęzi <em>rc_2</em>. Zrobiono tak, ponieważ zadanie to powinno znaleźć się na produkcji jak najszybciej, bez czekania na przetestowanie i ewentualne poprawki do zadań <em>task_1</em> i <em>task_2</em>. Z gałęzi <em>rc_2</em> wgrano kod na serwer przedprodukcyjny, przetestowano go i zmergowano do gałęzi <em>master</em>. Następnie stworzono nowy tag <em>v0.1</em> i wgrano kod na produkcję.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dalej, zmiany z gałęzi <em>master</em> zostały włączone do gałęzi <em>rc_1</em> z zadaniami <em>task_1</em> i <em>task_2</em> (ważne!). Po przetestowaniu, zmergowano gałąź <em>rc_1</em> do <em>master</em>, stworzono nowy tag <em>v0.2</em> i wgrano kod na produkcję.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Na dzisiaj to już wszystko, mam nadzieję, że przedstawiłem jasno proponowany przeze mnie schemat zarządzania wydaniami aplikacji w praktyce. Oraz że komuś z Was się on przyda w codziennej pracy. A może macie lepsze/inne sprawdzone schematy zarządzania gałęziami i wgrywkami? Zapraszam do dyskusji w komentarzach!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Klient zmienia co chwilę zdanie co powinno zostać wgrane na serwer stagingowy albo produkcję? W dzisiejszym wpisie proponuję mechanizm zarządzania wydaniami w Gicie, radzący sobie z takimi ciężkimi przypadkami! :)]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2019-05-08 21:00:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-08 20:00:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[zarzadzanie-wydaniami-git]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="deploy"><![CDATA[deploy]]></category>
		<category domain="category" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="na-dluzej"><![CDATA[Na dłużej]]></category>
		<category domain="category" nicename="polski"><![CDATA[Polski]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[workflow]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Zarządzanie wydaniami]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jak zorganizować zarządzanie wydaniami aplikacji w systemie kontroli wersji? Mechanizm umożliwiający elastyczny dobór zadań do wgrania na staging/produkcję.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[75]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[229]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Ikony w aplikacji internetowej - bitmapy, plik ikon czy SVG?</title>
		<link>https://nitrooos.pl/2019/05/ikony-w-aplikacji-internetowej/</link>
		<pubDate>Fri, 31 May 2019 19:00:54 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=261</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Niemal w każdej aplikacji internetowej prędzej czy później zachodzi potrzeba dodania prostych ikon. Stanowią one prostą, graficzną reprezentację akcji, które użytkownik może wykonać. I tak, widząc ołówek od razu wiemy, że w tym miejscu możemy coś edytować, a najeżdżając kursorem na znak zapytania spodziewamy się pojawienia "dymku" z dodatkowym opisem. Jak więc widzimy, ikony w aplikacji internetowej pełnią ważną funkcję informacyjną, ułatwiającą zrozumienie działania strony. W jaki sposób jednak przechowywać&nbsp;je w sposób efektywny, tak, były w łatwy sposób konfigurowalne i reużywalne? Zapraszam!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Wiele dostępnych opcji</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Okazuje się, że ten sam efekt na stronie możemy osiągnąć na wiele sposobów. Spośród dostępnych możemy wymienić między innymi:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Każda ikona jako osobny obrazek (bitmapa)</li><li>Plik bitmapy zawierający wszystkie ikony używane w aplikacji internetowej (ang. <em>spritesheet</em>)</li><li>Plik z fontem, zawierający ikony jako pojedyncze znaki (ang. <em>glyphs</em>)</li><li>Plik formatu SVG, zawierający definicje używanych ikon</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Każda z nich (może poza pierwszą ;) posiada swoje wady i zalety, które postaram się opisać w tym artykule.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Ikony jako osobne pliki graficzne</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jest to zdecydowanie najprostsza z dostępnych opcji, stosowana przez mniej doświadczonych programistów frontendowych. W pułapkę tworzenia nowego pliku dla każdej kolejnej ikony można wpaść bardzo łatwo. Wystarczy, że programista nie będzie świadomy dalszego kierunku rozwoju aplikacji. Może przez to nie spodziewać się, że będzie ich z czasem potrzebnych coraz więcej. Gdy takich ikon aplikacja ładuje niewiele to oczywiście nie jest problem, ale przy większej ilości pojawia się problem:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>WADA: Niepotrzebne zwiększenie ilości żądań do serwera</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Każde z nich (prawdopodobnie) zakończy się szybko (ikony nie powinny mieć&nbsp;zbyt dużego rozmiaru), jednak ładując stronę zawierającą 50 ikon, wykonujemy do serwera o 49 żądań za dużo ;) Jak pokażę w dalszej części, istnieją metody pozwalające na załadowanie ich jednym żądaniem HTTP. Mając dodatkowo na uwadze ograniczenie przeglądarek na ilość jednocześnie otwartych połączeń sieciowych dla danej domeny (na ten temat można poczytać&nbsp;np. <a href="https://docs.pushtechnology.com/cloud/latest/manual/html/designguide/solution/support/connection_limitations.html">tutaj</a>), jest to poważna wada. Nowoczesne przeglądarki posiadają w większości limit 6 otwartych połączeń per domena. Tak więc jednocześnie z naszego serwera pobieranych może być maksymalnie 6 plików (w tym ikon), co może wydłużać ładowanie strony.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>WADA: Brak możliwości konfiguracji ikony</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p> Dopóki dana ikona wykorzystywana jest tylko w jednym miejscu w aplikacji, to nie problem. Co jednak jeśli ikonę np. kalendarza będziemy chcieli wyświetlić w czterech miejscach: w wersji niebieskiej małej, niebieskiej dużej, czerwonej małej i czerwonej dużej? Konieczność <em>lekkiej</em> modyfikacji pojedynczej ikony w tych dwóch parametrach zakończy się prawdopodobnie umieszczeniem w katalogu zasobu w 4 wersjach. A taki widok nie jest niczym przyjemnym:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">$ ls -l
total 4
-rw-r--r-- 1 user group  520 May 20  2019 calendar.png
-rw-r--r-- 1 user group  520 May 20  2019 calendar_big.png
-rw-r--r-- 1 user group  520 May 20  2019 calendar_red.png
-rw-r--r-- 1 user group  520 May 20  2019 calendar_red_big.png</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":3} -->
<h3>WADA: Utrata jakości po przeskalowaniu</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Oczywistość, ale należy o tym pamiętać - dla prostych ikon warto rozważyć stosowanie grafiki wektorowej w formacie SVG, dzięki czemu unikniemy problemów takich jak poniżej.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":289,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://nitrooos.pl/wp-content/uploads/2019/05/pixelized.png" alt="Ikona ołówka w normalnym rozmiarze i powiększona" class="wp-image-289"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph {"align":"center"} -->
<p style="text-align:center"><small>Utrata jakości spowodowana skalowaniem grafiki rastrowej (ikona ołówka pobrana z <a href="https://www.stockio.com/free-icon/maria-pencil">https://www.stockio.com/free-icon/maria-pencil</a>)</small></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Ikony w aplikacji internetowej w jednym pliku</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jest to krok naprzód względem metody pierwszej, ponieważ rzeczywiście wszystkie ikony mogą być załadowane za pomocą jednego żądania HTTP. Wciąż jednak pozostają 2 kolejne wady wymienione powyżej: brak możliwości konfiguracji ikon oraz brak możliwości skalowania bez utraty jakości. Dla kronikarskiego obowiązku odnotowuję jednak, że taka metoda była również niegdyś stosowana. Odpowiednie pliki, będące zbiorami ikon nadal możemy znaleźć w Internecie, np. taki:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":290,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://nitrooos.pl/wp-content/uploads/2019/05/icon_spritesheet.png" alt="Spritesheet jako bitmapa z ikonami" class="wp-image-290"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>I tutaj jest miejsce na ciekawostkę, ponieważ interesujący jest sposób korzystania z takiego pliku. Wymagane jest zdefiniowanie odpowiedniego kodu CSS "wycinającego" potrzebny fragment z obrazka. I tak, chcąc korzystać z pliku "/assets/spritesheet.png" jako pliku ikon, definiujemy napierw klasę oznaczającą ikonę:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-css"} -->
<pre class="wp-block-code lang-css"><code>.icon {
  background: url('/assets/spritesheet.png') no-repeat;
  height: 32px;
  width: 32px;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>A następnie klasy definiujące poszczególne ikony:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-css"} -->
<pre class="wp-block-code lang-css"><code>.icon-question {
  background-position: 0 0; 
}

.icon-info {
  background-position: -32px 0;
}

...

.icon-github {
  background-position: 0 -160px;
}

...

.icon-internet-explorer {
  background-position: -96px -192px;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>I tak dalej, definiując kolejne przesunięcia dla poszczególnych ikon. Istnieją nawet strony stworzone specjalnie w celu wyznaczania odpowiednich przesunięć dla ikon, np. <a href="https://getspritexy.com/">https://getspritexy.com/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Osadzenie ikon w pliku fontu</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Szukając lepszych alternatyw natrafimy na pierwszą, naprawdę sensowną: osadzenie ikon jako pojedynczych znaków (ang. <em>glyph</em>) w pliku fontu. Ikony są osadzone w jednym pliku, dodatkowo w postaci bezstratnej. Nie jest też zapisywana informacja o kolorze znaku. Oznacza to, że możemy dowolnie zmieniać&nbsp;rozmiar ikoy bez straty jakości oraz ustawiać jej dowolny kolor. O to chodziło! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Techniki tej używa popularny projekt <a href="https://fontawesome.com">Font Awesome</a>, zawierający ponad 1,5 tysiąca darmowych ikon w darmowej wersji. Jest to więc świetna opcja, kiedy nie zależy nam na wykorzystaniu ikon dostarczonych przez klienta, ale mamy pewną dowolność w ich dobieraniu. W takim wypadku naprawdę jest to opcja godna rozważenia.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Gdzie kryje się haczyk?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Nic nie jest idealne, a ta technika nie jest wyjątkiem. Edycja plików z fontami nie jest prosta, należy do tego celu użyć odpowiedniego programu. Z dostępnych opcji mamy płatny Adobe Illustrator, ale także darmowy <a href="https://fontforge.github.io">Font Forge</a>, z którego korzystam. Ciągle jednak, edycja fontu wymaga nauki kolejnego narzędzia oraz jest <strong>w ogólności czasochłonna</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Niestety, dodatkowo do tego dochodzi problem obsługi formatów fontów przez przeglądarki. Jeśli mamy obsługiwać ostatnie wersje Chrome, Firefox, Safari i IE11 (co wciąż jest częstą sytuacją), to okaże się, że będziemy musieli eksportować plik do <strong>kilku formatów</strong>. I tak przy każdej zmianie, wszystko po to, aby nasze ikony były wyświetlane we wszystkich wspieranych przeglądarkach. Najczęściej będą to formaty TTF, WOFF2 i EOT (dla Internet Explorera).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Jeśli i to Was nie zraża, to ciągle pozostaje jeden problem, choć i z nim można sobie poradzić. Jest to zachowanie przeglądarki, która może wyświetlać&nbsp;już tekst na stronie, korzystając z fontu systemowego podczas gdy nasz plik jest pobierany z serwera. Prowadzi to do sytuacji, w której przez krótki czas w miejscach, w których pojawią się później nasze ikony, <strong>wyświetlane będą "krzaki"</strong>. Dlaczego tak się dzieje? Poszczególne ikony są często definiowane na pozycjach przeznaczonych do użytku własnego. Osobiście spotykałem się z wykorzystaniem obszaru od pozycji 0x800. W naszym pliku znajdują się tam pożądane ikony, ale font systemowy może mieć zdefiniowane tam dowolne znaki. Zachowaniem tym można jednak sterować za pomocą właściwości CSS o nazwie font-display.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Jak korzystać z ikon zdefiniowanych w pliku fontu?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Załóżmy, że zdefiniowaliśmy ikony na pozycjach od 0x800 do 0x80F. W takim wypadku należy zacząć od zdefiniowania fontu:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-css"} -->
<pre class="wp-block-code lang-css"><code>@font-face {
  font-family: 'icons-font';
  src: url('/fonts/icons-font.eot');
  src: url('/fonts/icons-font.eot#iefix') format('embedded-opentype'),
  url('/fonts/icons-font.woff2?40259512') format('woff2'),
  url('/fonts/icons-font.ttf?40259512') format('truetype');
  font-weight: normal;
  font-style: normal;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Następnie wszystkie nazwy klas z danym przedrostkiem powinny być zarezerwowane dla ikon (w naszym przypadku przedrostek "icon-"):</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-css"} -->
<pre class="wp-block-code lang-css"><code>[class^="icon-"]:before, [class*=" icon-"]:before {
  display: inline-block;
  font-family: "icons-font";
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1em;
  text-transform: none;
  width: 1em;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Następnie rozpoczynamy definiowanie poszczególnych ikon:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-css"} -->
<pre class="wp-block-code lang-css"><code>.icon-pencil:before                      { content: '\e800'; }
.icon-book:before                        { content: '\e801'; }
.icon-cross:before                       { content: '\e802'; }

...

.icon-plus:before                        { content: '\e80E'; }
.icon-minus:before                       { content: '\e80F'; }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Od teraz możemy użyć dowolnej z tych ikon dodając prosty kawałek HTML:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-html"} -->
<pre class="wp-block-code lang-html"><code>&lt;span class="icon-pencil">&lt;/span></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Odpowiedni kolor ikony można uzyskać dodając kolejną klasę CSS i definiując dla niej regułę. Dla przykładu aby ikona ołówka była niebieska, możemy dodać jej klasę "pencil" i regułę:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-css"} -->
<pre class="wp-block-code lang-css"><code>.pencil {
  color: blue;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Plik SVG z używanymi ikonami</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Opcją posiadającą wszystkie zalety poprzedniej i jednocześnie pozbawioną jej wad jest stworzenie jednego pliku SVG ze wszystkimi potrzebnymi nam ikonami (tak, format SVG pozwala na takie rzeczy!). Definiując ikony w aplikacji internetowej w formacie SVG uzyskujemy możliwość:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>dowolnego doboru rozmiaru ikony (format bezstratny)</li><li>dowolnego ustawiania koloru</li><li>naprawdę prostej edycji poszczególnych ikon (plik SVG to zwykły plik tekstowy!)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Jak możemy to uzyskać?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zaczniemy od stworzenia nowego pliku, np. <em>spritesheet.svg</em> z następuącą zawartością:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-html"} -->
<pre class="wp-block-code lang-html"><code>&lt;svg>
  &lt;defs>
    &lt;g id="icon-pencil">
      &lt;!-- definicja pierwszej ikony -->
    &lt;/g>
    &lt;g id="icon-book">
      &lt;!-- definicja drugiej ikony -->
    &lt;/g>
    &lt;!-- i tak dalej... -->
  &lt;/defs>
&lt;/svg></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Poszczególne ikony definiujemy wewnątrz elementów &lt;g&gt;, nadając im unikalne identyfikatory (atrybut "id"). Samą definicję ikon możemy skopiować z jednego z darmowych źródeł (np. znanego i cenionego <a href="https://www.flaticon.com/">https://www.flaticon.com</a>) i wkleić do pliku. Możliwe jest także samodzielne stworzenie i edycja plików SVG, np. za pomocą programu <a href="https://inkscape.org/">Inkscape</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Dobrze, ale jak mogę wyświetlić taką ikonę na stronie?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Na początku należy oczywiście umieścić&nbsp;odpowiedni plik na stronie, co można najprościej uczynić "wklejając" zawartość pliku <em>spritesheet.svg</em> do dokumentu HTML, na przykład jako pierwszy potomek elementu &lt;body&gt;. Możliwe jest także dopisanie tego pliku jako zasobu do pobrania w sekcji &lt;head&gt;:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-html"} -->
<pre class="wp-block-code lang-html"><code>&lt;link rel="preload" href="spritesheet.svg" as="image"></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Następnie, w dowolnym miejscu naszej strony możemy odwołać się do dowolnej ikony poprzez kod:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-html"} -->
<pre class="wp-block-code lang-html"><code>&lt;svg viewBox="0 0 100 100" class="icon icon-pencil">
  &lt;use xlink:href="#icon-pencil">&lt;/use>
&lt;/svg></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Należy tylko uważać na ścieżkę odwołującą się do ikony: w tym przypadku jest to po prostu #pencil-icon i jest to wartość właściwa gdy definicja ikony jest zawarta bezpośrednio w dokumencie HTML. Jeśli nie wklejamy zawartości pliku <em>spritesheet.svg</em> tylko odwołujemy się do niego po nazwie, to musimy pamiętać o niej w atrybucie xlink:href</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-html"} -->
<pre class="wp-block-code lang-html"><code>&lt;svg viewBox="0 0 100 100" class="icon icon-pencil">
  &lt;use xlink:href="/spritesheet.svg#icon-pencil">&lt;/use>
&lt;/svg></code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Bonus! Stylowanie za pomocą CSS</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Ikony w formacie SVG zamieszczone na stronie stanowią integralną część drzewa DOM, dlatego możliwe jest stylowanie ich (a nawet ich części!) za pomocą reguły fill w CSS:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-css"} -->
<pre class="wp-block-code lang-css"><code>.icon-pencil {
  fill: red;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Czy naprawdę jest tak idealnie?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Odpowiedź brzmi: oczywiście nie! Choć wada, jaka tutaj się pojawia może nie mieć znaczenia w niektórych przypadkach. Mowa oczywiście o wsparciu przeglądarek. Dopóki korzystamy z metody osadzania zawartości pliku <em>spritesheet.svg</em> jest nieźle. IE 8+, Safari 5+, iOS 4.3+ i Android 2.3+ to naprawdę dobry wynik. Mniej różowo jest gdy postanawiamy korzystać z możliwości cache'owania przez przeglądarki tego pliku i umieszczamy go jako osobny zasób w &lt;link&gt;. Wówczas tracimy wsparcie wszystkich wersji Internet Explorera, co niestety nadal jest nie do przyjęcia w wielu projektach. Z drugiej strony istnieje odpowiedni polyfill, tj. biblioteka <a href="https://www.npmjs.com/package/svg4everybody">svg4everybody</a>, co zawsze jest opcją do rozważenia.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Ikony w aplikacji internetowej - podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Dostępnych możliwości jest jak widać wiele, i wybór najlepszej zależy od konkretnego przypadku. Dla aplikacji profesjonalnych, komercyjnych można jednak polecić metody ikon osadzonych w pliku fontu oraz ikon definiowanych w pojedynczym pliku SVG (spritesheet). Mimo że wymagają więcej wysiłku w tworzeniu i utrzymaniu to posiadają niepodważalne zalety. Możliwość definiowania dowolnego koloru i rozmiaru bez straty jakości są naprawdę dużymi plusami. Mam nadzieję, że artykuł pomógł Wam zdobyć lepsze rozeznanie w tym temacie, zapraszam do komentowania!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Tym razem na warsztat bierzemy temat ikon w aplikacji internetowej: powinniśmy używać bitmap, plików SVG czy może dedykowanego pliku fontu z ikonami? Zapraszam na analizę dostępnych możliwości!]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date><![CDATA[2019-05-31 20:00:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-31 19:00:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ikony-w-aplikacji-internetowej]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="bitmapy"><![CDATA[bitmapy]]></category>
		<category domain="category" nicename="frontend"><![CDATA[Frontend]]></category>
		<category domain="post_tag" nicename="ikony"><![CDATA[ikony]]></category>
		<category domain="category" nicename="na-dluzej"><![CDATA[Na dłużej]]></category>
		<category domain="category" nicename="polski"><![CDATA[Polski]]></category>
		<category domain="post_tag" nicename="svg"><![CDATA[svg]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Ikony w aplikacji internetowej]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Porównanie dostępnych sposobówna to, by wyświetlać ikony w naszej aplikacji internetowej. Opisuję m.in. bitmapy, grafikę wektorową (SVG) oraz pliki ikon.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[73]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[263]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>HyphenatePipe - uzupełnienie do ostatniego wpisu</title>
		<link>https://nitrooos.pl/2019/05/hyphenatepipe-uzupelnienie/</link>
		<pubDate>Wed, 15 May 2019 19:00:54 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=266</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>W jednym z moich niedawnych wpisów (<a href="https://nitrooos.pl/2019/04/automatyczne-dzielenie-wyrazow-na-sylaby-hyphenation/">Hyphenation - automatyczne dzielenie wyrazów na sylaby</a>) poruszyłem problem zgodnego z gramatyką dzielenia długich wyrazów na sylaby w aplikacji. Cel ten został osiągnięty poprzez zaimplementowanie własnego pipe'a, czyli klasy HyphenatePipe. Uznałem, że wpis ten wymaga uzupełnienia, ponieważ podana w nim implementacja zawiera pewne niedopowiedzenie. Spokojnie, nie jest to krytyczna podatność, ale okazuje się, że w pewnych okolicznościach może napsuć nam nerwów ;) O co chodzi? Zapraszam do przeczytania krótkiego uzupełnienia!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>TLDR;</strong><br>Operacja tworzenie Pipe'a ze wspomnianego wpisu (HyphenatePipe) jest czaso- i pamięciochłonna. Przy intensywnym używaniu tego narzędzia Angular będzie (potencjalnie) wielokrotnie potwarzał tę kosztowną operację, zupełnie niepotrzebnie. Potrzebna jest modyfikacja przedstawionej implementacji tak, aby tworzenie instancji HyphenatePipe było znacznie mniej kosztowne.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>W jaki sposób w Angularze działa narzędzie Pipe?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Za <a href="https://angular.io/guide/pipes">dokumentacją</a>, w Angularze rozróżnia się dwa podstawowe rodzaje Pipe'ów:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>pure pipe</em>, czyli odmiana domyślna, w założeniu nie posiada wewnętrznego stanu, dlatego Angular stara się wykorzystać <strong>tę samą instancję</strong> w jak największej liczbie miejsc, w ramach jednego widoku. Oznacza to oszczędność pamięci oraz, co ważne w naszym przypadku, czasu potrzebnego na stworzenie kolejnych instancji</li><li><em>impure pipe</em> to z kolei rodzaj, który możemy nadać dla własnego Pipe'a poprzez użycie flagi { pure: false } w dekoratorze @Pipe. Odmiana ta może posiadać wewnętrzny stan a Angular tworzy nową instancję dla każdego wystąpienia Pipe'a w widoku. Jest to opcja znacznie bardziej pamięcio- i czasochłonna, dlatego powinniśmy używać jej z rozmysłem.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Definicja problemu</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pipe, który opisałem (HyphenatePipe) co prawda należy do tego pierwszego rodzaju, jednak bardzo łatwo przeoczyć pewien fakt.  <strong>Używając Pipe'a w ramach elementów potomnych </strong>(nawet jeśli są częścią tej samej strony aplikacji i są typu <em>pure</em>) <strong>zostaną utworzone osobne instancje Pipe'a</strong>. Każda z nich odpowiadać będzie pojedynczemu użyciu w widoku. Jakie ma to znaczenie? Aby to zrozumieć należy zastanowić się...</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Czym właściwie zajmuje się konstruktor klasy HyphenatePipe?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Tworzy on nową instancję obiektu klasy Hypher (pole o nazwie hyphenator). Operacja ta wymaga zaimportowania odpowiedniego wzorca językowego do dzielenia wyrazów, a także parsowania go. W przypadku opisywanego języka (niemiecki) wzorzec ten jest bardzo duży (ok 70kB danych), w ogólności mogą mieć one od kilku do kilkudziesięciu kB. W połączeniu z tworzeniem instancji klasy HyphenatePipe dla każdego użycia konstrukcji " ... | hyphenate" w kodzie, opóźnia to ładowanie naszej aplikacji :/</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Niestety, do tego stopnia, że problem ten okazał się być głównym czynnikiem wydłużającym czas ładowania aplikacji. W moim przypadku Pipe tworzony był 8 razy, przy czym za każdym razem wykonywana była operacja importu wzorca językowego. Dokładnie o 7 razy za dużo &lt;facepalm&gt;.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Rozwiązanie problemu z klasą HyphenatePipe</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Rozwiązaniem jest oczywiście wykonanie importu wzorca językowego tylko 1 raz. Możemy to osiągnąć poprzez wydzielenie operacji tworzenia obiektu hyphenator klasy Hypher do dedykowanego serwisu. W naszym przypadku będzie on nazywał się HyphenationPatternsService. Implementacja jest prosta, spokojnie można przedstawić ją w jednym fragmencie kodu:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-typescript"} -->
<pre class="wp-block-code lang-typescript"><code>import { Injectable } from '@angular/core';
import * as Hypher from 'hypher';
import * as german from 'hyphenation.de';

@Injectable()
export class HyphenationPatternsService {
  private hyphenator: Hypher = null;

  constructor() {
    this.hyphenator = new Hypher(german);
  }

  public hyphenate(word: string) {
    return this.hyphenator.hyphenate(word);
  }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Następnie możemy wstrzyknąć&nbsp;ten serwis jako zależność do klasy HyphenatePipe:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-typescript"} -->
<pre class="wp-block-code lang-typescript"><code>constructor(private hyphenationService: HyphenationPatternsService) { }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Od teraz tworzenie nowych instancji HyphenatePipe jest bardzo szybkie i nie rzutuje na czasie ładowania aplikacji. Wzorzec językowy dla dzielenia wyrazu na sylaby jest ładowany tylko 1 raz. Gotowe!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Uzupełnie wpisu nt. klasy HyphenatePipe - co zrobić gdy używanie pipe'a w aplikacji pogarsza jej wydajność? Jak działa Pipe w Angularze? Zapraszam!]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date><![CDATA[2019-05-15 20:00:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-15 19:00:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hyphenatepipe-uzupelnienie]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="bezpieczenstwo"><![CDATA[Bezpieczeństwo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[HyphenatePipe]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Uzupełnie wpisu nt. klasy HyphenatePipe - co zrobić gdy używanie pipe'a w aplikacji pogarsza jej wydajność? Jak działa Pipe w Angularze? Zapraszam!]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[78]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[hyphenation-uzupelnienie]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[hyphenation-pipe-uzupelnienie]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[hyphenationpipe-uzupelnienie]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Geolokalizacja użytkowników za pomocą GeoLite2</title>
		<link>https://nitrooos.pl/2019/06/geolokalizacja-geolite2/</link>
		<pubDate>Thu, 20 Jun 2019 19:00:04 +0000</pubDate>
		<dc:creator><![CDATA[bartoszkostaniak_k9gtfpdt]]></dc:creator>
		<guid isPermaLink="false">https://nitrooos.pl/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Okazuje się, że wiedza o tym, skąd pochodzą odwiedzający witrynę goście pozwala na lepsze dostosowanie jej do ich wygody, a nawet do podejmowania decyzji w kontekście biznesowym. Decyzje takie mają bezpośrednie przełożenie na wielkość ruchu i zainteresowanie naszą witryną! Jak to możliwe? Postaram się odpowiedzieć dzisiaj na to pytanie, ponieważ geolokalizacja z pomocą biblioteki GeoLite2 jest tematem tego artykułu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>TLDR;</strong><br><a href="https://dev.maxmind.com/geoip/geoip2/geolite2/">GeoLite2</a> to darmowa, solidna baza danych, zawierająca odwzorowania adresów IP na przypsane do nich kraje i miasta. Istnieje wiele gotowych interfejsów programistycznych (API) do tej bazy, m.in. dla języków C#, C, Java, JavaScript (node.js), Perl, PHP, Python i Ruby.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Czym jest GeoLite2?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://dev.maxmind.com/geoip/geoip2/geolite2/">GeoLite2</a> to baza danych (w formacie binarnym) odwzorowująca adresy IP z całego świata na państwa i miasta, z których pochodzą. Znając dany adres IP (a dostęp do niego nie jest trudny w przypadku aplikacji webowych) możemy z jej pomocą dowiedzieć się więc z jakiego państwa, a nawet miasta została odwiedzona strona. Oczywiście baza taka nie posiada (i nigdy nie będzie) stuprocentowej dokładności, dlatego też mogą zdarzyć się jej pomyłki. Z własnego doświadczenia wiem jednak, że są one niezwykle rzadkie, a sama baza działa bardzo dokładnie. Jak bardzo? Producent twierdzi, że wersja płatna (o nazwie <a href="https://www.maxmind.com/en/geoip2-services-and-databases">GeoIP2</a>) zawiera w sobie 99,9999% adresów IP będących w użyciu. Z kolei jej dokładność jeśli chodzi o podanie nazwy kraju, z którego pochodzi dany adres ma wynosić 99,8%. Liczby te robią wrażenie, lecz nie są podane żadne dane dotyczące wersji darmowej (czyli GeoLite2). Producent zaznacza jedynie, że wersja darmowa jest mniej dokładna i rzadziej aktualizowana.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Połączenie z bazą GeoLite2</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Zaczynamy od pobrania bazy GeoLite2, obecnie dostępnej na stronie producenta, czyli firmy MaxMind, pod <a href="https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz">tym</a> linkiem. Zauważmy, że jest to baza w wersji "country", co oznacza odwzorowanie adresów IP na nazwy państw, nie miast. Jest to mniejsza wersja darmowej bazy, istnieje jeszcze odmiana "city", odwzorowująca adresy na poszczególne miasta świata, ale jest też kilkanaście razy większa pod względem rozmiaru. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Następnie instalujemy jeden z dostępnych API do bazy GeoLite2 (w naszym przypadku będzie to API dla Pythona):</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">$ pip install geoip2</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Od teraz możemy się połączyć z bazą, najprościej za pomocą skryptu:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-python"} -->
<pre class="wp-block-code lang-python"><code>>>> import geoip2.database

>>> reader = geoip2.database.Reader('/path/to/GeoLite2-Country.mmdb')</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Zaznaczmy, że obiekt Reader, łączący się z bazą, służy do <em>wielokrotnego</em> wykonywania zapytań do bazy. Nie powinien być tworzony za każdym razem od nowa, ponieważ jest to operacja kosztowna. Wreszcie możemy wykonać pierwsze zapytania:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-python"} -->
<pre class="wp-block-code lang-python"><code>>>> response = reader.country('135.200.12.84')
>>>
>>> response.country.iso_code
'US'
>>> response.country.name
'United States'
>>> response.subdivisions.most_specific.name
'Indiana'
>>> response.subdivisions.most_specific.iso_code
'IN'
>>> reader.close()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Otrzymujemy konkretną informację o kraju pochodzenia adresu IP i regionie (w tym przypadku stan USA). W przypadku, gdybyśmy łączyli się z bazą typu "city", moglibyśmy uzyskać dodatkowe informacje:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-python"} -->
<pre class="wp-block-code lang-python"><code>>>> response = reader.city('135.200.12.84')
>>>
>>> response.city.name
'Indianapolis'
>>> response.postal.code
'46226'
>>> response.location.latitude
39.7722
>>> response.location.longitude
-86.1565
>>> reader.close()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Po zakończeniu pracy z bazą możemy wywołać metodę .close() obiektu reader (zamyka ona połączenie z bazą w sposób jawny).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Jako uzupełnienie dodam, że istnieje możliwość&nbsp;użycia GeoIP2 (czyli wersji płatnej) w formie web serwisu, wówczas interfejs programistyczny pozostaje niemal bez zmian, ale nie musimy trzymać&nbsp;lokalnie baz danych typu "city" ani "country".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Geolokalizacja w Django</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Okazuje się, że (pozostając w klimacie Pythona) najpopularniejszy framework webowy dla tego języka posiada wbudowane wsparcie dla korzystania z baz GeoIP2 i GeoLite2. Odpowiednia paczka wewnątrz Django nazywa się <strong>django.contrib.gis.geoip2</strong> i umożliwia import klasy <strong>GeoIP2</strong> (odpowiednik wcześniejszego Reader'a). Klasa ta stanowi nakładkę (<em>wrapper</em>) na bibliotekę geoip2, której używa wewnętrznie. Przykładowa sesja pracy z tą paczką wygląda następująco (wzięta jako przykład ze <a href="https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geoip2/">strony w dokumentacji Django</a>):</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-python"} -->
<pre class="wp-block-code lang-python"><code>>>> from django.contrib.gis.geoip2 import GeoIP2
>>>
>>> geoip = GeoIP2()
>>> geoip.country('facebook.com')
{'country_code': 'US', 'country_name': 'United States'}
>>> geoip.city('72.14.207.99')
{'city': 'Mountain View',
'continent_code': 'NA',
'continent_name': 'North America',
'country_code': 'US',
'country_name': 'United States',
'dma_code': 807,
'latitude': 37.419200897216797,
'longitude': -122.05740356445312,
'postal_code': '94043',
'region': 'CA',
'time_zone': 'America/Los_Angeles'}
>>> geoip.lat_lon('salon.com')
(39.0437, -77.4875)
>>> geoip.lon_lat('uh.edu')
(-95.4342, 29.834)
>>> geoip.geos('24.124.1.80').wkt
'POINT (-97 38)'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Widzimy, że API jest trochę zmienione, korzystanie z niego jest jednak wciąż bardzo wygodne. Dokumentacja Django służy w tym przypadku nieocenioną pomocą. Skąd jednak framework wie, gdzie znajduje się plik z bazą danych GeoIP2 (bądź GeoLite2)? Odpowiadają za to trzy stałe konfiguracyjne, które możemy ustawić w pliku <em>settings.py</em> naszego projektu:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-python"} -->
<pre class="wp-block-code lang-python"><code>GEOIP_PATH = os.path.join(BASE_DIR, 'common', 'geoip', 'country_dataset')
GEOIP_COUNTRY = 'Geo_db_country.mmdb'  # domyślnie 'GeoLite2-Country.mmdb'
GEOIP_CITY = 'Geo_db_city.mmdb'        # domyślnie 'GeoLite2-City.mmdb'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Pierwsza z nich, GEOIP_PATH jest wymagana. Pozostałe dwie są opcjonalne tak długo, jak trzymamy się domyślnych nazw dla plików z bazami danych miast i państw.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Pomysł: inteligentny wybór języka i lokalizacji na stronie</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>W tej części artykułu wykorzystamy geolokalizację do automatycznego ustawiania języka i lokalizacji na stronie. Oznacza to, że użytkownik odwiedzający naszą witrynę np. z Madrytu, zobaczy ją po raz pierwszy od razu w języku hiszpańskim. Dodatkowo, Hiszpania będzie ustawiona automatycznie jako lokalizacja użytkownika. Jest to nieraz istotne z punktu widzenia biznesu, ponieważ jeśli oferujemy jakieś produkty/usługi na sprzedaż w Internecie, to ich oferta może różnić się pomiędzy krajami. Jak można zaimplementować taką funkcjonalność w Django?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Przykładowy middleware</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Całkiem sensownymi pomysłami na implementację są dedykowany dekorator funkcji (np. @set_country_and_language) oraz własny middleware (jest to mechanizm typowy dla Django, umożliwia przetworzenie żądania zanim zostanie ono skierowane do obsługi w odpowiednim widoku). W tym przypadku zdecydujemy się na opcję drugą.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zaczniemy od utworzenia nowego pliku (zwyczajowo zwanego <em>middleware.py</em> w Django) oraz od zdefiniowania w nim kilku potrzebnych importów:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-python"} -->
<pre class="wp-block-code lang-python"><code>from django.utils import translation

from common.constans import DEFAULT_COUNTRY
from common.geoip.utils import detect_country_by_IP
from common.models import CountryModel
from common.utils import get_language_associated_with_country</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Paczka django.utils.translation odpowiada za włączenie odpowiedniego języka na stronie po wykryciu kraju - i ustaleniu powiązanego z nim języka. DEFAULT_COUNTRY to zwykła stała tekstowa, może być równa np. 'GB'. Oznacza to, że domyślnym krajem będzie Wielka Brytania, jeśli nie zdołamy ustalić go na podstawie adresu IP. detect_country_by_IP to funkcja pomocnicza wykonująca właściwą detekcję kraju. CountryModel to po prostu model kraju w aplikacji. Ostatni import, get_language_associated_with_country, to funkcja pomocnicza, odwzorowująca kraj na język przypisany do niego.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-python"} -->
<pre class="wp-block-code lang-python"><code>class GeoIPMiddleware:

    """
    Custom geo location middleware which tries to detect user country and
    language in case of country is not already set in session (like when user
    visits site for the first time).

    Location is set based on request's IP address and by using django.contrib.gis.geoip2 package.
    """</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Middleware jest klasą jak każda inna, nie musi dziedziczyć z żadnej klasy bazowej. Dodajemy zwięzły opis dokumentujący klasę.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Każdy middleware implementuje jedną lub wiele z metod wywoływanych przez Django, najczęściej jest to metoda process_request z żądaniem jako argumentem. Framework wywołuje ją przy każdym żądaniu, jeszcze zanim zdecyduje który widok powinien obsłużyć żądanie:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"lang-python"} -->
<pre class="wp-block-code lang-python"><code>def process_request(self, request):
    if 'country' not in request.session:
        detected_country_code = detect_country_by_IP(
            request.META['REMOTE_ADDR'])
        application_country_code = self._get_application_country(
            detected_country_code)
        associated_language = get_language_associated_with_country(
            application_country_code)

        request.session['country'] = application_country_code
        translation.activate(associated_language)

        return None</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Działanie naszego middleware'u polega na obsłużeniu sytuacji, w której klucz 'country' nie jest ustawiony w sesji. W takim przypadku dokonujemy detekcji kraju (za pomocą detect_country_by_IP, adres IP dostępny jest w obiekcie żądania jako request.META['REMOTE_ADDR']). Następnie sprawdzamy czy w bazie danych aplikacji istnieje kraj o podanym kodzie poznanym w wyniku geolokalizacji (metoda _get_application_country, implementacja w dalszej części sekcji) - być może detekcja wskazała na np. Kongo, ale nasza witryna nie obsługuje tego kraju ;) Potem pobieramy język powiązany z krajem (get_language_associated_with_country), ustawiamy kraj w słowniku sesji i aktywujemy odpowiedni język (tłumaczenia) na stronie.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Każdy middleware w Django powinien zwracać&nbsp;None lub obiekt klasy HttpResponse. W naszym przypadku process_request zwraca None, co oznacza, że Django będzie dalej przetwarzać żądanie normalnie.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Implementacja funkcji pomocniczych</h4>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def detect_country_by_IP(ip_address):

    """
    Auto-detects user's country based on IP address
    Implementation uses GeoIP2 package

    :param ip_address: IP address as string to look up
    :return: Country code as string
    """

    try:
        geoip = GeoIP2()
        geoip_guess = geoip.country_code(ip_address)
        if geoip_guess is not None:
            detected_country_code = geoip_guess
        else:
            detected_country_code = DEFAULT_COUNTRY
    except GeoIP2Error:
        detected_country_code = DEFAULT_COUNTRY

    return detected_country_code</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Pierwsza z używanych funkcji pomocniczych (detect_country_by_IP) tworzy obiekt klasy GeoIP2 i próbuje pobrać kod kraju na podstawie adresu IP. Jeśli to się udaje, geolokalizacja zakończyła się sukcesem! W przeciwnym wypadku używamy domyślnego kraju.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def _get_application_country(self, proposed_country_code):
    proposed_country_exists = CountryModel.objects.filter(
        country=proposed_country_code).exists()
    if proposed_country_exists:
        return proposed_country_code
 
    return DEFAULT_COUNTRY</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Następnie wywołujemy metodę _get_application_country. Jeśli aplikacja nie obsługuje kraju o kodzie, jaki wskazała geolokalizacja, używamy domyślnego kraju.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Nie podaję implementacji funkcji get_language_associated_with_country, ponieważ jest ona specyficzna dla danej aplikacji. Każdy kraj może mieć po prostu przypisany do siebie język domyślny, i ta funkcja ma za zadanie ustalenie jaki język powinien zostać ustawiony na stronie dla wykrytego kraju.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Dodanie middleware do ustawienień aplikacji</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pozostaje jeszcze dodanie naszego middleware do listy używanych przez aplikację:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    ...
    'common.geoip.middleware.GeoIPMiddleware',
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Najlepiej zrobić to na końcu listy, ponieważ&nbsp;wówczas będzie on używany po zaaplikowaniu wszystkich poprzednich, pochodzących z frameworka middleware'ów.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Geolokalizacja - podsumowanie</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jak starałem się wykazać, temat geolokalizacja nie jest funkcjonalnością ciężką w implementacji, trudną do osiągnięcia. Istnieje gotowa, darmowa biblioteka GeoLite2, za pomocą której możemy dodać geolokalizację do naszej strony w prosty sposób. Dodatkowo, biblioteka ta posiada pełne wsparcie w Django, co jest dodatkowym atutem. Mam nadzieję, że odrobinę rozjaśniłem temat, dzięki za przeczytanie i do następnego wpisu!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[Dziś na warsztacie temat lokalizacji użytkowników naszej witryny. W jaki sposób określić kraj (i miasto), z którego wizytowana jest strona? Odpowiedź w artykule! (ikona Ziemi pobrana z https://www.iconfinder.com/websitebeaver)]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date><![CDATA[2019-06-20 20:00:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-20 19:00:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[geolokalizacja-geolite2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="geoip"><![CDATA[#geoip]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[#python]]></category>
		<category domain="category" nicename="backend"><![CDATA[Backend]]></category>
		<category domain="post_tag" nicename="geolokalizacja"><![CDATA[geolokalizacja]]></category>
		<category domain="category" nicename="polski"><![CDATA[Polski]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:13:"layout-global";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpbf_sidebar_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[global]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Geolokalizacja]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Geolokalizacja użytkowników witryny bazująca na adresie IP odwiedzającego. Implementacja z wykorzystaniem darmowej bazy danych GeoLite2. Zapraszam!]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[76]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[340]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[xyz_smap]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[xyz_smap_insert_og]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	